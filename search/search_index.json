{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IRENA FlexTool IRENA FlexTool is an energy systems optimisation model developed for power and energy systems with high shares of wind and solar power. It can be used to find cost-effective sources of flexibility across the energy system to mitigate the increasing variability arising from the power systems. It can perform multi-year capacity expansion as well as unit commitment and economic dispatch in a user-defined sequence of solves. The aim has been to make it fast to learn and easy to use while including lot of functionality especially in the time scales relevant for investment planning and operational scheduling of energy systems. Documentation structure You can find the installation instructions for IRENA FlexTool using Spine Toolbox as its interface (recommended in most cases): Install with Toolbox Follow video tutorial for installation with Spine Toolbox here: Link to YouTube You can also use IRENA FlexTool with a web browser, but you will need to install a web server first: Install with web server If using FlexTool with Spine Toolbox, learn how the Spine Toolbox workflow functions: Spine Toolbox workflow . If using FlexTool with a web-browser, read how it works: Browser interface The tutorial is recommended for the new users of FlexTool: Tutorial How-to section has examples on how to add specific features to a model: How to More advanced users can find the model parameter descriptions useful: Model parameters Finally, result parameters are documented here: Model results","title":"Introduction"},{"location":"#irena-flextool","text":"IRENA FlexTool is an energy systems optimisation model developed for power and energy systems with high shares of wind and solar power. It can be used to find cost-effective sources of flexibility across the energy system to mitigate the increasing variability arising from the power systems. It can perform multi-year capacity expansion as well as unit commitment and economic dispatch in a user-defined sequence of solves. The aim has been to make it fast to learn and easy to use while including lot of functionality especially in the time scales relevant for investment planning and operational scheduling of energy systems.","title":"IRENA FlexTool"},{"location":"#documentation-structure","text":"You can find the installation instructions for IRENA FlexTool using Spine Toolbox as its interface (recommended in most cases): Install with Toolbox Follow video tutorial for installation with Spine Toolbox here: Link to YouTube You can also use IRENA FlexTool with a web browser, but you will need to install a web server first: Install with web server If using FlexTool with Spine Toolbox, learn how the Spine Toolbox workflow functions: Spine Toolbox workflow . If using FlexTool with a web-browser, read how it works: Browser interface The tutorial is recommended for the new users of FlexTool: Tutorial How-to section has examples on how to add specific features to a model: How to More advanced users can find the model parameter descriptions useful: Model parameters Finally, result parameters are documented here: Model results","title":"Documentation structure"},{"location":"browser_interface/","text":"Browser interface in brief The browser interface connects to an instance of FlexTool web interface . It can show and edit the same data as the Spine Toolbox. The workflow is not directly visible, but it is executed in the background when models are run. The main page shows the projects available for the user. The front page for the data editor shows all the data classes that can be shown and edited. Different data classes can be opened to separate browser tabs for convenience. Parameter data can be shown and edited once the user chooses an object and an alternative. On the 'Run' page, the user can select and execute scenarios. Finally, the results page shows the model outputs taken from the result database. The results database can also be opened with Spine Toolbox for more control over the shown data as well as export capabilities.","title":"Browser interface"},{"location":"browser_interface/#browser-interface-in-brief","text":"The browser interface connects to an instance of FlexTool web interface . It can show and edit the same data as the Spine Toolbox. The workflow is not directly visible, but it is executed in the background when models are run. The main page shows the projects available for the user. The front page for the data editor shows all the data classes that can be shown and edited. Different data classes can be opened to separate browser tabs for convenience. Parameter data can be shown and edited once the user chooses an object and an alternative. On the 'Run' page, the user can select and execute scenarios. Finally, the results page shows the model outputs taken from the result database. The results database can also be opened with Spine Toolbox for more control over the shown data as well as export capabilities.","title":"Browser interface in brief"},{"location":"how_to/","text":"How-to How-to section contains examples on how to include common energy system components in your model. The examples assume that you have sufficient understanding of FlexTool basics (e.g. by doing the tutorial). Each example will either include an example database file that is located in the 'how to examples databases' folder or the example is included in the init.sqlite as a scenario. If the example is in its own database, you can switch to that database by selecting the 'input' data store in the workflow and then changing the database by clicking the folder icon next to the current database file path in the 'Data store properties' widget. Navigate to the 'how to example databases' folder and choose the appropriate database. This section is divided into two parts: Building parts of the model: How to create a PV, wind or run-of-river hydro power plant How to connect nodes in the same energy network How to set the demand in a node How to add a storage unit (battery) How to make investments (storage/unit) How to create combined heat and power (CHP) How to create a hydro reservoir How to create a hydro pump storage How to add a reserve How to add a minimum load, start-up and ramp How to add CO2 emissions, costs and limits How to create a non-synchronous limit How to see the VRE curtailment and VRE share results for a node Setting different solves: How to run solves in a sequence (investment + dispatch) How to create a multi-year model How to use a rolling window for a dispatch model How to use Nested Rolling window solves (investments and long-term storage) General: How to use CPLEX as the solver How to enable/disable outputs How to make the Flextool run faster How to create a PV, wind or run-of-river hydro power plant (init.sqlite scenario: wind) init - west - wind These three power plant types don't use any commodities (i.e. fuels), but are instead dependant on a timeseries profile. To create these plants one needs an output node, an unit and a profile. The unit only needs parameters: is_active : yes existing : [The maximum capacity of the plant] Additionally these parameters should be at their default values: conversion_method : constant_efficiency efficiency : 1 The profile object only has one parameter: profile . It is a timeseries map which tells what fraction of the capacity the plant can produce at each timestep. The relationships unit__outputnode : (plant|output node) and unit__node__profile : (plant|output node|profile) need to be both created. The unit__node__profile relationship needs a parameter profile_method that has three options: upper_limit , lower_limit and exact . It states how the profile is considered. In most cases the upper_limit option should be used as it allows the plant to curtail the production if there is more supply than demand. Otherwise the output node might have to use downward_penalty to spill energy. The same profile can be used for multiple unit__outputnode s (and that is why the profile is not a unit parameter but its own entity). How to connect nodes in the same energy network (connections.sqlite) Typically nodes are used to maintain an energy balance and therefore they are used to represent a location with demand or a storage. The nodes can pass energy to each other through a connection entity. This is often an electricity connection but it can be any form of energy (or matter) moving between two nodes. To create a connection one needs: two nodes connection relationship connection__node__node to tie these three together. The connection needs the parameters: is_active : yes existing : The maximum capacity of the connection [MW]. Applies to both directions. efficiency : represents the losses in transferring the energy. Same in both directions. Optional parameters: is_DC : yes , flag if the connection is counted as non-synchronous for the possible non-synchronous limit. If is_DC (direct current) is yes, then the connection is non-synchronous. More at: How-to create a non-synchronous limit transfer_method : Four options: regular (default), exact , variable_cost_only , no_losses_no_variable_cost . In most cases regular should be used. The downside of it is that it allows the flows to both directions at the same time, but the model does this only in specific circumstances when its beneficial to leak energy through the connection losses. For example, if connection capacity is 500 and efficiency 0.8, both nodes can send 500, but recive only 400 reducing the incoming energy by 100 in both nodes without any cost. Typically the model does not want to produce extra energy as it usually has costs, but it can happen if there is a cost to curtailing energy generation from a free source or if a unit is forced to generate at some level ('e.g. using profile_method : 'equal'). If non-synchronous constraint is used with a node using this connection, use exact instead as regular connections can circumvent this limit. Exact method does not allow flow in both directions at the same time, but it requires a binary variable, which will be computationally heavier (especially if the model would otherwise be fully linear). Variable_cost_only can be used when there are no losses associated with the flow. It allows costs related to the flow, but if losses are to be included, it should not be used. The no_losses_no_variable_cost can be used when the connection has no losses and no variable costs accociated with the flow. It is computationally the most efficient method, as it uses only one variable for the flow (the variable becomes negative for the other direction, but this can work only when there are no losses or variable costs). It also prevents simultanoues flow to both directions. The results of connections can be seen from the node_balance table. However, these are the results from all the connections connected to the node. If you want to have the results from an individual connection or specified connections, you can create a group of connection_nodes ( group_connection_node ) with a parameter output_results set to yes . This will produce sum_flow` results from the connection to the node. The example database shows a connection between a two node system where the other node has a wind power plant and the other node has a coal power plant. How to set the demand in a node (demand.sqlite) The demand in a node is set with the inflow parameter. When the node is consuming energy or matter, the values should be negative and when the node is supplying energy (or matter) the values should be positive. The inflow parameter accepts two types of data: Constant Timeseries map If the model is using multiple periods, then the same timeseries profile is used for every period. However, the inflow can be scaled for different periods with the inflow_method parameter: - scale_to_annual_flow : This will multiply the demand with a constant to make the summed inflow to match the annual_flow . This requires the node parameter annual_flow that is a map of periods containing the annual flow for each period. The sum of inflows is divided by the period's share of the year (hours in period /8760) before scaling (so that the annual energy demand/supply matches the annual_flow no matter what parts of the year are used to represent the full year). - scale_in_proportion : calculates a scaling factor by dividing annual_flow with the sum of time series inflow (after it has been annualized using timeline_duration_in_years ). This does not force the demand/supply to match annual flow in case the representative periods are not representing the full year, but the time series will still be scaled to capture the proportional change in the annual_flow parameter. - scale_to_annual_and_peak_flow : The inflow scaled so that the peak is at the given peak_flow and the inflow sums to annual flow of the period. This is done by the following equation: new_inflow = (peak/peak_old)*(1+c)*old_inflow-peak*c where c = [(peak/peak_old)*(8760/hours_in_period)*sum(old_inflow) - annual_flow] / [peak*8760 - (peak/peak_old)*(8760/hours_in_period)*sum(old_inflow)] Examples of all these options are shown in the demand.sqlite. How to add a storage unit (battery) (init.sqlite, scenario: wind_battery) init - west - wind - battery In the Init SQLite database, there is a scenario wind_battery . In the example, the wind_plant alone is not able to meet the load in all conditions, but the battery will help it to improve the situation. In FlexTool, only nodes can have storage. Nodes can therefore be demand nodes, storage nodes or both. To make a storage node one the required parameters are: is_active : yes has_balance : yes has_storage : yes existing : The maximum storage size of battery as the potential energy [MWh] penalty_up : a large number to prefer not creating energy from nowhere penalty_down : a large number to prefer not creating energy from nowhere Additional parameters: self_discharge_loss The fraction of energy loss in each hour. Storage states can be tied to a value. For this three methods are introduced: storage_start_end_method : Fixes start and/or end state of the storage to a chosen value. This is for the start and the end of the whole model timeline (not for individual solves in case the model is rolling forward). storage_state_start and storage_state_end set these values. storage_bind_method : Forces the start and end values to be the same for the chosen time interval (timeblock, period or solve) storage_solve_horizon_method : Fixes the state of the storage at the end of the solve horizon or sets a price for the stored energy at the end of the solve horizon storage_state_reference_value and storage_state_reference_price set these values Having multiple storage methods can create infeasible problems. This is why some of the combinations shouldn't (and cannot) be used at the same time. If multiple methods are used, some of them might be ignored by the method hierarchy. More information can be found from Model Parameters: Using nodes as storages . Battery also needs charging and discharging capabilities. These could be presented either with a connection or by having a charging unit and a discharging unit . In here, we are using a connection called battery_inverter . Please note that the efficiency parameter of the connection applies to both directions, so the round-trip efficiency will be efficiency squared. The transfer_method can be used by all types of connections, but in this case it is best to choose regular , which tries to avoid simultaneous charging and discharing, but can still do it when the model needs to dissipate energy. exact method would prevent that, but it would require integer variables and make the storage computationally much more expensive. Model leakage will be reported in the results (forthcoming). The required paremeters of the connection are: is_active : yes existing : The capacity of energy transsmission [MW] transfer_method : (see above) Additional parameters: efficiency : by default 1 Finally connection_node_node relationship is needed between inverter, the battery and the demand node (west). How to make investments (storage/unit) (init.sqlite scenario: wind_battery_invest) init - west - wind - battery - battery_invest Here we will use the previous battery scenario to represent the investment options in the tool. The solve will invest only if it has an array of invest_periods set, telling the periods where it is allowed to make investment decisions. In a multi solve investment model (rolling investments) it can be useful to separately set invest_realized_periods so that the investment results get reported only from the chosen periods from each solve (in order to avoid overlapping reporting of investment decisions that are replaced by investment decisions in later solves). Furthermore, realized_periods will define the solves and periods from which the dispatch results are output into results. First, the investment parameters need to be included both for the battery_inverter and battery objects: invest_method - the modeller needs to choose between only_invest , only_retire , invest_and_retire or not_allowed invest_cost - overnight investment cost new capacity [currency/kW] for the battery_inverter and [currency/kWh] for the battery . Other one can be left empty or zero, since they will be tied together in the next phase. Here we will assume a fixed relation between kW and kWh for this battery technology, but for example flow batteries could have separate investments for storage and charging capacities. interest_rate - an interest rate [e.g. 0.05 means 5%] for the technology that is sufficient to cover capital costs. The chosen interest rate should reflect the assumption that in the model economic lifetime equals the technical lifetime. lifetime - technical lifetime of the technology to calculate investment annuity (together with the interest rate) Additional parameters: invest_max_total : maximum investment (power [MW] or energy [MWh]) to the virtual capacity of a group of units or to the storage capacity of a group of nodes. In the same way investment limits can be set for total and period, investment and retirement, min and max lifetime_method : Model can either be forced to reinvest when the lifetime ends reinvest_automatic or have a choice reinvest_choice salvage_value : Sets the extra value that can be gained for retiring [CUR/kW] fixed_cost : Annual cost for capacity [CUR/kW] retire_forced : forces to retire at least this amount of capacity In many cases some of the investment decisions are tied to each other. Here the battery capacity and the connection capacity of the battery_inverter will be tied as they are simultaneously limited by the choice of the battery technology to be invested in. To model this, a new constraint needs to be created that ties together the storage capacity of the battery and the charging/discharging capacity of the battery_inverter . A new constraint object battery_tie_kW_kWh is created and it is given parameters constant , is_active and sense . Constant could be left out, since it is zero, but is_active must be defined in order to include the constraint in the battery_invest alternative . The sense of the constraint must be equal to enforce the kw/kWh relation. Both battery_inverter and battery need a coefficient to tell the model how they relate to each other. The equation has the capacity variables on the left side of the equation and the constant on the right side. sum_i(`constraint_capacity_coefficient` * `invested_capacity`) = `constant` where i is any unit, connection or node that is part of the constraint When the constraint_capacity_coefficient for battery is set at 1 and for the battery_inverter at -8, then the equation will force battery_inverter capacity to be 8 times smaller than the battery capacity . The negative term can be arranged to the right side of the equation, which yields: 1 x *battery* = 8 x *battery_inverter*, which can be true only if *battery_inverter* is 1/8 of *battery* constraint_capacity_coefficient is not a parameter with a single value, but a map type parameter (index: constraint name, value: coefficient). It allows the object to participate in multiple constraints. Finally, FlexTool can actually mix three different types of constraint coefficients: constraint_capacity_coefficient , constraint_state_coefficient and constraint_flow_coefficient allowing the user to create custom constraints between any types of objects in the model for the main variables in the model ( flow , state as well as invest and divest ). So, the equation above is in full form: + sum_i [constraint_capacity_coefficient(i) * invested_capacity] where i contains [node, unit, connection] belonging to the constraint + sum_j [constraint_flow_coefficient(j) * capacity] where j contains [unit--node, connection--node] belonging to the constraint + sum_k [constraint_state_coefficient(k) * capacity] where k contains [node] belonging to the constraint = constant where 'capacity' is existing capacity plus invested capacity How to create combined heat and power (CHP) (init.sqlite scenario: coal_chp) init - west - coal_chp - heat First, a new heat node is added with the necessary parameters. The nodes can be used for energy form of energy or matter, so the heat demand node does not differ from the electricity demand node. The required parameters are: is_active : yes has_balance : yes inflow : Map for the heat demand (negative) [MW] penalty_up : a large number to prefer not creating energy from nowhere penalty_down : a large number to prefer not creating energy from nowhere The heating systems tend to have some level of storage capability, so one could also add storage parameters to the node as well, but here they are not used. Then the coal_chp unit is made with a high efficiency parameter, since CHP units convert fuel energy to power and heat at high overall rates. In FlexTool, efficiency is a property of the unit - it demarcates at what rate the sum of inputs is converted to the sum of outputs. However, without any additional constraints, the unit is free to choose in what proportion to use inputs and in what proportion to use outputs. In units with only one input and output, this freedom does not exist, but in here, the coal_chp needs to be constrained as otherwise the unit could produce only electricity and no heat at 90% efficiency, which is not feasible. This CHP plant is an another example where the user defined constraint (see the last equation in the previous example) is used to achieve the desired behaviour. In a backpressure CHP, heat and power outputs are fixed - increase one of them, and you must also increase the other. In an extraction CHP plant the relation is more complicated - there is an allowed operating area between heat and power. Both can be represented in FlexTool, but here a backpressure example is given. An extraction plant would require two or more greater_than and/or lesser_than constraints to define an operating area. Electricity and heat outputs are fixed by adding a new constraint coal_chp_fix where the heat and power co-efficients are fixed. You need to create the two relationships unit__outputNode , for coal_chp--heat and coal_chp--west . As can be seen in the bottom part of the figure below, the constraint_flow_coefficient parameter for the coal_chp--heat and coal_chp--west is set as a map value where the constraint name matches with the coal_chp_fix constraint object name. The values are set so that the constraint equation forces the heat output to be twice as large as the electricity output. Create constraint coal_chp_fix object with parameters: is_active : yes sense : equal constant : 0.0 Create unit_outputNode (coal_chp|heat): constraint_flow_coefficient : coal_chp_fix , -0.5 Create unit_outputNode (coal_chp|west): constraint_flow_coefficient : coal_chp_fix , 2 Again, the negative value can be turned positive by arranging it to the right side of the equality, creating this: 1 x *electricity* = 0.5 x *heat*, which is true only if *heat* is 2 x *electricity* How to create a hydro reservoir hydro_reservoir.sq Note! This example concerns a single reservoir hydro power plant. If the river system has multiple plants in a series and their operations are tied, then multiple nodes and units are needed to represent the system. The objective is to create a hydro power plant with a reservoir and connect it to a demand node. Hydro reservoir power plant requires three components: Reservoir node Hydro unit Output node It can be useful to create a new alternative for these components to be able to include and exclude them from the scenarios. The reservoir is made with a node as only nodes can have storage in FlexTool. The incoming water can be represented by the inflow parameter. It can be a constant or a time variant. The unit of the inflow should be the power that can be created from the quantity of the incoming water at maximum efficiency [MW]. In the same way, the existing storage capacity should be the maximum amount of stored energy that the reservoir can hold [MWh]. In this implementation of reservoir hydro power, there is an option to spill water (energy) from the storage so that it does not run through the plant. The simplest way of allowing spilling is setting the downward penalty of the node to 0. This way the energy can disappear from the storage without a cost. The quantity of spilled energy can be seen from the results as the 'downward slack' of the node. The required parameters of the reservoir node are (node_c and node_t sheets if using Excel input data): is_active : yes has_balance : yes has_storage : yes inflow : Mapping of the incoming water as the potential power [MW] existing : The maximum size of the reservoir as the potential energy [MWh] penalty_up : a large number to prefer not creating energy from nowhere penalty_down : 0 or a large number (spilling or not) a storage_method to set the behaviour on how the storage levels should be managed - for short duration storages bind_within_timeblock may be best and for seasonal storages it could be best to use bind_within_solve . If historical storage level time series are available, it can be beneficial to use fix_start in the storage_start_end_method together with storage_solve_horizon_method use_reference_value , which will pick the storage level at the end of each solve from the time series provided as a reference ( storage_state_reference_value ). The unit is connected to the reservoir node and the output node nodeA (unit_c and unit_node_c in excel): The efficiency of the unit can be set to 1 as the inflow time series are directly expressed in MWh (using piecewise linear efficiency is naturally possible). Set existing capacity [MW] is_active : yes Create relations unit__inputNode : hydro_plant | reservoir and unit__outputNode : hydro_plant | nodeA . How to create a hydro pump storage (hydro_with_pump.sqlite) For a hydro pump storage one needs the following components: Demand node hydro_plant unit with storage node , hydro_pump unit with pump storage node a source for external energy (pumped storage plant will lose energy due to charging losses) For the demand node and the hydro plant we will use the same components as in the previous hydro_reservoir example. With the difference that both demand and hydro_plant capacities are doubled. Wind power plant will be used as a source for external energy. First create the pump_storage. This is the downstream storage from the hydro plant. Again it should have the parameters as the reservoir: is_active : yes has_balance : yes has_storage : yes existing : The maximum size of the storage [MWh]. Note that this really represents the mass of the water and it should be converted as the potential of the energy of the reservoir-plant system. So that 1 liter of water has the same energy in both storages. penalty_up : a large number to avoid creating energy from nowhere penalty_down : 0 In this example database, we have both a closed system and a river system. The difference is that in the closed system the inflow is zero in both reservoir and pump_storage. In river system we have the incoming water for the reservoir as in the reservoir example. In the downstream pump storage we implement a outflow as the negative inflow representing the minimum amount of water that has to flow out of the system at each timestep to not dry out the river. The penalty_down is set as 0 to allow it let more water go when it needs to, otherwise the storages will keep filling up if the incoming water is larger than the minimum outgoing water. The storage level fixes should be the same in both storages (reservoir and pump storage). Here: fix_start_end_method : fix_start storage_state_start : 0.5 bind_storage_method : bind_with_timeblock This sets the starting storage levels to be 50%. The binding will also constrain the state of the storage at the end of of each timeblock to be the same as in the beginning of the timeblock. Then create the pump unit. It only needs three parameters: efficiency = 1, The real efficiency of the pump is set elsewhere, so use 1.0 here. existing : The wanted capacity is_active : yes Set the relationships as follows: unit_outputNode for (hydro_plant | nodeA), (hydro_plant | pump_storage ), (hydro_pump | reservoir) unit_inputNode for (hydro_plant | reservoir), (hydro_pump | pump_storage), (hydro_pump | nodeA) Your system should look something like: Next comes the tricky part of preserving the water and energy as both are represented as generic energy in the model. This is done by setting extra coefficents and constraints to the flows. First the hydro_plant needs to both create the energy for the demand node and pass the mass to the pump_storage. This is done by doubling the efficiency in this example to 2 and setting a extra constraint to force the output flows to both the demand node and the storage to be the same. For the hydro plant: Efficiency : 2 Create a new constraint (here plant_storage_nodeA_split ) and add the parameters: is_active : yes sense : equal constant : 0.0 And for the unit_outputNodes : (hydro_plant | nodeA) constraint_flow_coefficient Map: plant_storage_nodeA_split , 1 (hydro_plant | pump_storage) constraint_flow_coefficient Map: plant_storage_nodeA_split , -1 Meaning: flow to nodeA - flow to pump_storage = 0 As for the pump storage, we will have to make sure that the same amount of water leaves the pump_storage and enters the reservoir. Also it still should use electricity from the demand node without increasing the amount of water that is moving from storage to another. First to prevent the energy from the demand node from increasing the water flow, add a coefficient to the flow between the demand node and the pump. unit_inputNode (hydro_pump|nodeA): - Coefficient : 0 (Default is 1) This prevents the water amount from increasing as: unit_output_flow = coeff1 * unit_input_flow1 + coeff2 * unit_input_flow2. We still have to make the unit to consume electricity even though it does not affect the unit output directly. This is done by setting a new constraint to tie the flows to the pump unit from pump storage and the nodeA. Add a constraint (here pump_storage_nodeA_fix ) the with the parameters: is_active : yes sense : equal constant : 0.0 And setting parameters for unit_outputNode and unit_inputNode : (hydro_pump | nodeA) constraint_flow_coefficient Map: plant_storage_nodeA_split , 2 (hydro_pump | pump_storage) constraint_flow_coefficient Map: plant_storage_nodeA_split , -1 2 * flow_from_nodeA - flow_from_pump_storage = 0 Note that here the ( constraint_flow_coefficient Map: plant_storage_nodeA_split , 2) actually sets the efficiency of the pump. This means that here only half of the electricity used by the pump can be recovered when that amount of water is used by the hydro_plant. (Two units of energy are used to move 1 unit of water_energy) The constraint_flow_coefficient for pump_input should therefore be (1/efficiency) How to add a reserve (init.sqlite: scenario network_coal_wind_reserve) In FlexTool, reserves are defined for a group of nodes. If there is a need to have a reserve requirement for a single node, it needs its own group. Therefore, when creating a reserve, the first step is to add a new group (e.g. electricity ) with all member nodes (e.g. west , east and north ) using the group__node relationship class. Then, a new reserve categories can be added (e.g. primary ) to the reserve object class. Finally, make sure there are up and down objects in the `UpDown' object class. These are hard-coded names in FlexTool and need to be used when creating reserves. Next, the reserve requirement will be defined. A relationship between in the reserve__upDown__group class (e.g. primary--up--electricity ) allows to define the reserve parameters reserve_method , reservation (i.e. the amount of reserve) and penalty_reserve (i.e. the penalty cost in case of lack of reserve). For example, a constant of 10 MW could be used. Even though the name of the reserve_method is timeseries_only , it can also accept a constant value - it's an exogenous reserve requirement whereas the other two reserve methods are endogenous. Dynamic reserve method calculates the reserve requirement from generation and loads according to user defined factors ( increase_reserve_ratio ). Largest failure method will force enough reserve to cope with a failure of the chosen unit and connection flows. Parameters from the reserve__upDown__unit__node class should be used to define how different units can contribute to different reserves. Parameter max_share says how large share of the total capacity of the timestep (existing * efficiency * (profile)) of the unit can contribute to this reserve category (e.g. coal_plant may be limited by ramp constraint to provide only 1% of its capacity to an upward primary reserve.) Meanwhile, parameter reliability affects what portion of the reserved capacity actually contributes to the reserve (e.g. wind_plant may contribute only 80% of its generation to reserve due to uncertainty). How to add a minimum load, start-up and ramp (ramp_and_start_up.sqlite) Some plants cannot vary their output freely, but have some cost and limits associated with it. In this example we will add the minimum load behaviour to a coal_plant unit and add the cost and limits for starting up and ramping the plant respectively. Minimum load requires that the unit must have an online variable in addition to flow variables and therefore a startup_method needs to be defined and an optional startup_cost can be given. The startup_cost is added to the total cost every time the unit is required to start-up. Here we use a value 1000 (Currency/MW started up). The options for the startup_method are no_startup , linear and binary . binary would require an integer variable so linear is chosen. However, this means that the unit can startup partially. The minimum online will still apply, but it is the minimum of the online capacity in any given moment ( flow >= min_load x capacity x online ), where 0 <= online <= 1. The online variable also allows to change the efficiency of the plant between the minimum and full loads. A unit with a part-load efficiency will obey the following equation: + sum_i[ input(i) * input_coefficient(i) ] = + sum_o[ output(o) * output_coefficient(o) ] * slope + online * section where slope = 1 / efficiency - section and section = 1 / efficiency - ( 1 / efficiency - min_load / efficiency_at_min_load) / ( 1 - min_load ) By default, input_coefficient and output_coefficient are 1, but if there is a need to tweak their relative contributions, these coefficients allow to do so (e.g. a coal plant might have lower efficiency when using lignite than when using brown coal). The input is required at different ouput levels is shown in the figure below, when Capacity = 100, Efficiency = 0.8, Minimum load = 0.6 and Efficiency at minimum load = 0.5. Next we will add ramp limits. With the ramping limits, the user can force the change of a flow from a unit to be below a certain value each timestep. The ramping is an attribute of the flow. Therefore it does not require the minimum load behaviour and its parameters are added to the unit_outputNode relationship: ramp_method : ramp_cost, ramp_limit or both. Only ramp limit is currently implemented (August 2023). ramp_speed_up : Limit on how fast the plant can ramp up. (fraction of unit / min) ie. Value 0.01 allows the change of 60% of capacity per hour. ramp_speed_down : Limit on how fast the plant can ramp down. (fraction of unit / min) ie. Value 0.01 allows the change of 60% of capacity per hour. ramp_cost : NOT YET IMPLEMENTED. The cost of ramping the capacity. [CUR/MW] How to add CO2 emissions, costs and limits (init.sqlite scenario: coal_co2 ) init - west - coal - co2_price - co2_limit Carbon dioxide emissions are added to FlexTool by associating relevant commodities (e.g. coal ) with a co2_content parameter (CO2 content per MWh of energy contained in the fuel). The other CO2 parameters are handeled through a group of nodes (Here coal_price or coal_limit groups ). Therefore one needs to create a group and add all the nodes that supply these commodities to a group with a group_node relationship. (Here the relationship co2_price--coal_market ) To set a price one needs to create set the co2_method parameter to price (constant) and create the co2_price parameter with the desired value. This price is added to the price of the commodity. Alternatively one can set a limit on the co2 used by setting the co2_method parameter to period and setting the co2_max_period (periodic map) parameter. If both methods price and period are to be used, then they need to use different groups . The groups can include the same nodes . How to create a non-synchronous limit (non_sync_and_curtailment.sqlite) (scenario: non_sync) Non-synchronous limit is a property of a group of nodes. It states that the non-synchronous flow to the group of nodes cannot exceed a set share of the input flows at any timestep. To demonstrate this, we have set a system with a coal plant, a wind plant and a single demand node. However, it can be done to a group of nodes with unlimited number of plants or connections connected. So, one can limit the non-synchronous share of individual nodes or of the whole system. The flows between the nodes of the group are excluded. The non-synchronous limit is set to a group of nodes with one or multiple members. Note: These are set to the group with group_node relationship, not with group_node_unit relationship! Create a group (here nodeA_group ) and set a group_node relationship (nodeA_group |nodeA). Then add parameters: has_non_synchronous : yes non_synchronous_limit : 0.5 penalty_non_synchronous : 4000 This forces the non-sync flow to be at max 50% of the incoming flow to the nodeA. The penalty should be always set as in some cases there is no other way to keep the constraint feasible (and it will be difficult to find the reason why the model does not solve). The existence of the non-synchronous penalty in your results indicates that this constraint has been violated and you should investigate the reason for this in your system. If the penalty_non_synchronous is lower than the upward_penalty of the demand node , the system will prefer breaking the non-sync constraint instead of the node balance equation. In other words, it will not curtail the production of profile plants if the demand is not satisfied even though it will break the non-synchronous penalty. If it is higher, the curtailment will take place instead. When having a connection to a storage from a node with this constraint, the best practice is to add this storage node to the group as well. This excludes the flows to and from the storage in the calculation of the non-synchronous ratio. However, if you want to have these flows in the calculation, you have two options depending on if you want the flow to be synchronous or not. If it is non-synchronous, just set the connection parameter is_DC : yes. If it is synchronous (e.g., some flywheels), an issue arises with the reqular connection as it now can reduce the ratio with equal simultaneous flow in both directions. To prevent the simultaneous flow to both directions you need to set the transfer_method : exact . This will increase the solving time significantly as it will use integer variables (so, better to add the storage node to the node group with a non-synchronous limit). Then set which plants and connections are considered non-synchronous by adding parameters: unit_outputNode : - is_non_synchronous : yes Connection_node_node : - is_DC : yes Here the (wind_plant|nodeA) relation has the is_non_synchronous parameter and battery connection is_DC parameter. A connection with transfer_method : no_losses_no_variables between a node included in a group with a non-synchronous limit and a node outside of the group is not allowed. The flow in this kind of a connection is presented with a single variable, which would not function correctly with the non-synchronous limit constraints (there is a non-linearity at zero that requires two variables). If you want to see the individual flows in the results you can create separate groups for the flows and add group_unit_node relations to it. To produce the flow results, the groups need the parameter. output_results : yes Here we have coal_flow group with group_unit_node relation coal_flow|coal_plant|nodeA and wind_flow group with group_unit_node relation wind_flow|wind_plant|nodeA. How to see the VRE curtailment and VRE share results for a node (non_sync_and_curtailment.sqlite) (scenario: curtailment) When the system has profile-units with the profile_method : upper_limit, the model can curtail the unit's flow to avoid penalties. The curtailment could take place for several reasons: the supply is higher than the demand and the energy cannot be stored or transferred (further) non-synchronous limit extra flow constraints have been set other unit specific constraint affecting how VRE units or other units are forced to behave (ramp, start-up ...) To see the curtailment results you need to add a group of nodes ( group_node not group_unit_node !) with one or more members. The group then needs the parameter: output_results : yes This produces the group : indicator result to the Results database and group_summary table to the excel. These changes were done to the previous non-sync example database. Note: The results are the share of curtailment in relation to the inflow (demand) so it can exceed 100% as seen in the figure. How to run solves in a sequence (investment + dispatch) (init.sqlite scenario: 5weeks_invest_fullYear_dispatch_coal_wind) In this example, investment decisions are made using a five week sample of a year and then the dispatch is solved with the full year timeline using these investments. To do this you need two solves: Investment solve Dispatch solve Both solves should solve the same periods using different timeblockSet to represent these periods. This example has only one period p2020 describing a year. The investment solve uses a representative sample timeblockSet 5weeks to do the investment decisions. These are then passed to the dispatch solve that uses complete timeline fullYear . Investment solve requires the parameters: Invest_periods : Array of periods where investments can be made realised_invest_periods : Array of periods that are output for investment decisions period_timeblockSet : Uses the 5weeks as the timeblock Note that the realized_invest_periods is used instead of realized_periods , because we want the investment solve to only output investments. Additionally some of the units, connections or storages will need investment parameters ( invest_cost , lifetime ...) see How to make investments (storage/unit) The dispatch solve requires the parameters: realized_periods : Array of output periods period_timeblockSet : Uses the fullYear as the timeblock The sequence of solves is defined by the model parameter solves . Here it is an array where the first item is an investment_solve 5weeks_only_invest and the second is the dispatch solve y2020_fullYear_dispatch . This is enough for the model to know to pass the investment decisions of the period to the period of the same name in the second solve. Note that the picture has two model : solves parameters defined one for each alternative. Only the parameter from the 5weeks_only_invest is used as the lower alternatives in the scenario tree override the values from the higher alternatives and only one model can be run. How to create a multi-year model A multi-year model is constructed from multiple periods, each presenting one year. In the example case, each year is otherwise the same, but the demand is increasing in the west node . This means that all periods can use the same timeblockset 5weeks from the same timeline y2020 , but one can also make separate timelines for each year, if data is available for this. The inflow time series are scaled to match the value in annual_flow that is mapped for each period. The model is using the inflow_method scale_to_annual in order to achieve this (default is use_original that would not perform scaling). There should also be a discount_rate parameter set for the model object flexTool if something else than the model default of 5% (0.05 value) is to be used. A multi-year model could be solved at one go (multi_year_one_solve) or by rolling through several solves (multi-year) where each solve has a foresight horizon and a realisation horizon. Next we will go through both options. Multi year with one solve (init.sqlite scenario: multi_year_one_solve) In this example, one solve is used for all the four periods. All the four periods need to be added to the solve arrays invest_periods and realized_periods . Here the same timeblock is used for all the four periods, so only difference between them is the increasing inflow set above. The parameters that need to be added to the solve object: years_represented parameter is used by the model to calculate the discounting factors for the periods in the model (often future years). It should state the number of years each period will be representing. For example, a period for 2025 could represent the years 2025-2029 if its years_represented is set to 5. Any investments would be taking place at the start of 2025 and discounted to the beginning of 2025, but the operational costs would accrue from each year in 2025-2029 each with a different discounting factor (decreasing based on the interest rate). invest_periods the periods in which the model is allowed to make investments. realized_periods the periods that will be realized in this solve (outputs dispatch results for these periods). period_timeblockset defines the set of representative 'periods' (timeblocks in FlexTool) to be used in each FlexTool period . Multi year with rolling solves (init.sqlite scenario: multi_year) If the solving time gets too big, there is an option to split the timeline into overlapping parts and solve them separately. This shortens the solving time as it increases exponentially as the model grows. Therefore, collection of smaller solves is faster. The drawback is that the accuracy will be affected if there are dependencies with a larger time interval than the split size. When dealing with investments the splitting only works if the different periods are similar, in most cases complete years. If the first solve is really windy, it would invest too much on wind which wouldn't produce enough energy in later solves and then it would need to invest again to something else. It can also be challenging to consider lifetimes. If the option of retiring is allowed, it might retire something that is needed for later solves. In this example, the periods are complete years and the only difference between periods is increased demand. The model rolls through several solves and therefore, the model object flexTool has four values in the solves array. Each value represents one solve and it's position in the sequence of solves. The next figure illustrates the realization (blue) and foresight horizons (grey). The first solve will solve both the year 2020 and year 2025, but it will only output the year 2020. The next will solve both 2025 and 2030 but only output 2025. Next figure shows the values needed to define one solve (out of the four solves in the example). Each of these need to be repeated for each solve in the model. years_represented parameter is used by the model to calculate the discounting factors for the periods in the model (often future years). It should state the number of years each period will be representing. For example, a period for 2025 could represent the years 2025-2029 if its years_represented is set to 5. Any investments would be taking place at the start of 2025 and discounted to the beginning of 2025, but the operational costs would accrue from each year in 2025-2029 each with a different discounting factor (decreasing based on the interest rate). invest_periods the periods in which the model is allowed to make investments. To be given for each solve. realized_periods the periods that will be realized in this solve (outputs dispatch results for these periods). To be given for each solve. invest_realized_periods parameter states the periods that will realize the investment decisions. If not stated, it will use realized_periods . period_timeblockset defines the set of representative 'periods' (timeblocks in FlexTool) to be used in each FlexTool period . Note the the solve_mode : rolling_window is not used! This is not for investment runs (without nesting) as it rolls freely, and investments should only be made at the start of the period. This example is called 'manual rolling' later when those are discussed. In the init.sqlite, the solve objects have solver parameters: highs_method , highs_parallel and highs_presolve . They only affect the speed and not the results, but usually the default values are good enough and the user should only change them if they understand how the solvers work. How to use a rolling window for a dispatch model A rolling window can be used for example when a dispatch model gets too big to be solved on one go. It splits the problem into multiple consecutive smaller problems. The rolling window solve splits the time dimension into overlapping parts and solves each one of them separately but in a sequence (and can therefore pass state information from the previous solve to the next one). For example, instead of a solving the full year in one go, you can split the year into six four-month long solves where each solve outputs only the first two months. The solves would therefore include the months: Roll: Solve months -> Output months 1: [1,2,3,4] -> [1,2] 2: [3,4,5,6] -> [3,4] 3: [5,6,7,8] -> [5,6] 4: [7,8,9,10] -> [7,8] 5: [9,10,11,12] ->[9,10] 6: [11,12] -> [11,12] The rolling solve could be setup also manually as described in the 'How to run a multi year model' - just using shorter periods. However, this would be tedious if there are many solves. In a rolling window model, the user can set the rolling_jump and rolling_horizon parameters, which are expressed in hours. rolling_horizon : sets the length of the whole solve, in hours. In previous example 4 months (2880 hours). Horizon allows the model to see bit further in the future to improve the decision making for the period that will be output. rolling_jump : sets the interval for the length of each 'jump' the model takes forward in reach roll. It is then both the interval of roll starting points and the length of the output for each roll. The rolling_jump must be smaller than the rolling_horizon . In the previous example the rolling_jump would be 2 months (1440 hours). In addition, the user has the possibility to use the other parameters to set the time interval where the rolling happens: rolling_start_time : Optional (timestamp), can be used to set a different starting point for the rolling than the first timestep (default). rolling_duration : Optional (hours), the length of combined rolls. In the example, it could be set to 8640 hours which would divide evenly, or 8760 hours which means that the last roll will be shorter than the others. It is nicer to use rolling_jump that is divisable with the rolling_duration to keep rolls even. If rolling_duration is not set, it defaults to rolling through the whole timeline. When using rolling window solve, you are solving the model with less information. Therefore, the results will be less optimal since the model will not have the full information at once. It is therefore important to know how this could affect the results and what things to consider when implementing a rolling window model. It will have an impact on time dependant parts of the model: for example, storages or cumulative flow constraints. If the model can see only a few months to the future, it can't see how much energy needs to be stored after that. Investments should not be used with this free rolling solve ( solve_mode : rolling_window ) as investments should only be done at the start of the periods. Both the long-term storage and the investments can be taken into account with nested rolling solves that have a separate how-to . Short term storages also are operated less optimally in a rolling window model. This is not necessarily a real problem, since perfect foresight linear optimization models are 'too optimal'. They don't reflect the forecast errors present in real life. So, a rolling window model might operate a bit more realistically than a single_solve model. A single_solve model can consider things happening far in the future when setting the storage level at present, even though in reality that information is not available. So, the total cost of a rolling_window model should always be higher than the total cost from a complete single_solve model that has perfect information. To set a dispatch rolling window model you need to set the object solve parameters: solve_mode : rolling_window rolling_jump : Hours, the desired length of the solve interval rolling_horizon : Hours, the desired length of each roll solve rolling_duration : (Optional) Hours, the length of the combined outputs. If not set, the whole timeline is used. rolling_start : (Optional) Hours, the starting timestep the whole solve, if not wanting to start from the beginning Considerations on the rolling times: The rolling_jump and rolling_horizon must be large enough to make the model faster. If too small intervals are used, the creation of solves and moving data from solve to another might take too much time. If you are not using 1-hour timesteps, preferably use multiples of the timestep you are using as the rolling_jump and rolling_horizon . The steps included in each solve are calculated by summing the step durations until they are larger or equal to the hours given. So, if multiples are not used, the rolls might not be exactly the same size. The model can roll over timeblock and period jumps, which might cause some issues if storage constraints are used. Using timeblock length or its multiples is therefore recommended. For example, the rolling_jump could be a half of a timeblock and the rolling_horizon whole timeblock or rolling_jump a timeblock and rolling_horizon three timeblocks. Of course, when running e.g. a full year dispatch, there is only one timeblock of 8760 hours, which makes the choices more simple. Considerations on storage parameters: storage_solve_horizon_method use_reference_value or use_reference_price are the preferred means to bind storage values. They can be used together with the storage_state_start_end_method : start , which would then set the initial storage state. These methods bind either the storage value or the storage price at the end of horizon (not the end of jump ). This allows the storage to use the part of the horizon that is not output to improve the behaviour of the storage in the part that is output (as defined by rolling_horizon and rolling_jump ). bind_within_timeblock does not work correctly if the rolls don't include whole timeblocks. Instead, it will bind the first step of the roll (whatever it is) to the end of the timeblock. Do not use in nested solves if you are not using whole timeblocks or its multiples as rolling_jump the same applies to the bind_within_period (but in relation to periods - do not use this unless you are rolling_jump is as long as a period or its multiples). storage_start_end_method can be used to set the first timestep of the first roll and/or the last timestep of the last roll (in conjunction with storage_state_start and storage_state_end ). bind_within_solve binds the start state to the end state of each roll not the start and end of the whole model timeline. Use with caution (and probably best not to use together with storage_solve_horizon_method use_reference_value ). How to use Nested Rolling window solves (investments and long-term storage) The basic rolling solve can have problems in dealing with long term storage and with investments. If the model only sees a few weeks to the future, it really can't see how much energy should be stored in long term storages. Problems with investments can also be rampant: What if the first roll is really windy, so it would invest too much on wind which wouldn't produce enough energy in later rolls and then it would need to invest again to something else. How can it consider lifetimes? If the option of retiring is allowed, it might retire something that is needed for later rolls. Nested solve sequences can first solve the investments and long-term storage levels and pass them to the dispatch solve. Both storage solve and dispatch solve can be rolling solves. The dispatch solves can then send the end storage values to the investment and long-term storage solves as start values to reduce the error of these solves. When to use nested solves? Dispatch model is takes too long to solve, but simple rolling window solve would not represent the long-term storages correctly. (Nesting without the investment solve) Investment model takes too long to solve, even with manual rolling How to create a multi-year model . With nesting you can have smaller rolls for dispatch solve than the investment solve. (Nesting without the storage solve) Investment model takes too long and you have long term storages to consider. (Three level nesting, graph below) However, the obvious issue is that investment and storage solves cannot be solved using the old complete solve as it wouldn't make the solve time any shorter. Therefore, we need to decrease the information for investment and storage solves as well. There are a few options for this: Use lower resolution (longer timesteps). This can work quite well for a long-term storage. Use representative periods from the full timeline when performing investments. There is a large body of literature and methods on how to pick the representative weeks. Split the investment timeline (myopic investments) by manually creating a solve sequence for the investment solves like in: How to create a multi-year model section. This can be combined with the first or second option. Each of these have their pros and cons: Using the lower resolution can speed-up the model considerably, but it also means that everything that happens faster than the new timestep duration will be lost as the timestep varying parameters are averaged or summed for the new timestep. For example, consider a model with investment options to solar and storage. If the step duration is changed to 24 hours, the model won't invest in enough storage to mitigate the diurnal variation in PV. When these investments are then passed to the dispatch solve, the invested portfolio will have trouble meeting the demand. Using the sample can be effective if the sample is chosen well, but all the needs that are not in these samples are not included. The speed is heavily dependent on the number and size of those samples. Splitting the investment timeline for multi-year models can be seen as a relatively realistic approach, since investment decisions would have a lot of uncertainty in the longer time frame anyway. The investment decisions with less information are always less optimal than with complete solves. Therefore, when they are passed to the dispatch solve, it will in some cases cause penalties in the results when the invested portfolio is not sufficient to meet the demand at all times. The long term storage solve can be implemented using a lower resolution solve. The storage state values from the storage solves will be used to fix the storage value (or price) at the end of each dispatch solve. This means that on the last step of the roll (or the period), the storage quantity (or price) will have to match the quantity (or price) in the storage solve. The rolling_jump and rolling_horizon in the storage solve have to be longer than in the dispatch solve. You can set which storages are included as \"long term storages\" whose value will be transferred to the dispatch solve. To create a nested solve sequence, you need two or three solve objects. Either the investment solve or the storage solve can be left out. When using nested solve sequence, the sequence is not set with the model : solves parameter. Only the topmost solve is put there. Instead, the nested levels are set by the solve parameter contains_solve : solve_name . The investment solve is always on the top followed by the storage solve and dispatch solve: investment_solve solve parameter contains_solve : storage_solve_name storage_solve solve parameter contains_solve : dispatch_solve_name To create a storage solve: solve parameter fix_storage_period : Array of periods where the storage values are fixed in the lower solve. Should be the same as realized_periods for the dispatch solve. node parameter storage_nested_fix_method : fix_quantity or fix_price , includes this storage to be fixed. fix_price requires storage_state_reference_price to be set. To create an investment_solve: solve parameter invest_periods : Array of periods where the model can invest. solve parameter realized_invest_periods : Array of periods where the model will realize investment decisions to the lower solves and results. solve parameter realized_periods : Should not be used in this solve! You don't want the dispatch results from this solve, but from the dispatch solve. In addition, the rolling dispatch solve should be created as in the How to use rolling window solve for dispatch . To set a dispatch rolling window model you need to set the object solve parameters: solve_mode : rolling_window rolling_jump : Hours, the desired length of the solve interval rolling_horizon : Hours, the desired length of each roll solve rolling_duration : (Optional) Hours, the length of the combined outputs. If not set, the whole timeline is used. rolling_start : (Optional) Hours, the starting timestep the whole solve, if not wanting to start from the beginning realized_periods : Array of periods that are realized The other model parameters apply to all of the solves. Therefore, the considerations of the storage value binding that were discussed in the How to use a rolling window for a dispatch model should be taken into account here as well. Storage levels can be fixed with storage_solve_horizon_method : use_reference_value or use_reference_price , these will fix the end of each horizon not each jump. storage_start_end_method fixes the starts and/or ends of each solve level, meaning the first step of the first roll and the last step of the last roll. In most cases the bind_storage_method should be left as bind_forward_only Do not use bind_within_timeblock if you are not using full timeblock or its multiples as the rolling_jump in the dispatch model, otherwise you might cause an infeasible problem. Do not use bind_within_period if you are not using full periods or its multiples as the rolling_jump in the dispatch model, otherwise you might cause an infeasible problem. Do not use bind_within_solve How to create the three lower information solve types for investment and storage solves discussed above? To create a lower resolution (longer timesteps) solve: Make a new timeblockSet , but use the same timeline and block_duration for it as with the high resolution solve Set timeblockSet parameter new_stepduration : Hours In the solve use this new timeblockSet in the period_timeblockSet The model will create a new timeline for this solve with the new_stepduration . All the timestep map data like inflow or profile will be either summed or averaged for the new timeline. Again, the new_stepduration should be multiple of the old step duration. If the block_duration is not a multiple of the new_stepduration the last timestep will be shorter than the rest. To create a sample solve with representative periods: The tutorial contains an example of representaive periods under alternative 5weeks where the year is represented with five sample weeks. It is done with the timeblockSet parameter block_duration where instead of choosing the whole timeline by setting the first timestep and the duration of whole timeline, you choose multiple starting points with smaller durations. The example for the 5weeks is below. To create an investment solve sequence, you have two options: Create manually a series of solves and set the invest_periods and realized_invest_periods individually for the solves. How to create a multi-year model has an example of this with the difference that here you use realized_invest_periods instead of realized_periods and that each of the higher level solves requires the contains_solve parameter. If you have many splits, this option can get tedious and prone to mistakes. The other option is to use only one investment solve object: The invest_periods and realized_invest_periods should then be set with a 2D map where the first column tells the solve (you don't have to create separate solve objects for these) and the second column tells the period. To get a 2D map, choose the parameter type as Map and then right click the table and choose Insert column after/before . The value column does not matter. The model will generate these solves, with the periods given. Note that the solve names should match in both 2D-maps. You can use the same lower level solve with each the investment solves as the lower level solves will exclude the periods that are not included in either of the upper level realized periods: realized_invest_periods or fix_storage_periods . So, the lower level solve should have all the periods that it is used for in any the solves. Note that the results of a nested rolling solve run are not fully optimal, because the information in the model is decreased. This is the price you pay for the speed. Therefore, the results should not be taken as they are, instead it is important to know how to interpret the results: What phenomena are missing? How will they affect the results? Where should extra investments go to satisfy the demand (there is a possibility to use the capacity_margin method to force extra investments)? In the init.sqlite there are four example scenarios related to this: multi_fullYear_battery : The four period full year single solve, with coal, wind, battery storage with unlimited investment possibilities. Running this is still possible but takes a few minutes. This is here as a reference for the nested solves. multi_fullYear_battery_nested_24h_invest_one_solve : This has the nested structure and the investment solve is done with 24h timesteps and storage solve 6h timesteps. multi_fullYear_battery_nested_sample_invest_one_solve : This has the investment solve as 5weeks sample but all the four periods are included in the same investment solve. Nested structure with 6h storage solve timesteps. multi_fullYear_battery_nested_multi_invest : This has split the investment to four solves with each having two period 5weeks sample period horizon. Nested structure with 6h storage solve timesteps. The 24h timestep is clearly too long as it invests too little for storage and coal. A large upward penalty ensues. The sample one solve invest also invests too little, as the largest demand-supply ratio weeks are not in the five week sample. However, the investments are spread more accurately. The split sample investment run produces in this case similar results as the one solve sample run. This is not always the case! Here the only difference between the periods was linearly increased demand. How to use CPLEX as the solver Using CPLEX requires that you have installed the software, have a licence for it and have added it to PATH or to the environment where you are using the FlexTool, so that the tool can find the solver. CPLEX is used when the solve parameter solver is set to 'cplex'. The tool passes the built optimization model to the CPLEX solver and converts the solution file to a filetype suitable for CPLEX. The solver will produce two additional files to the work directory: 'cplex.log' and 'flexModel3_cplex.sol'. The former is the logfile of the solver and the latter contains the solution in the CPLEX format. The tool uses Interactive Optimizer to pass the problem to the solver. The default command used: cplex -c 'read flexModel3.mps' 'opt' 'write flexModel3_cplex.sol' 'quit' Additional parameters: solver_precommand creates a text in front of the cplex call. This is useful when dealing with floating licences. The command allows to call the licence server to reserve the licence for the duration of the cplex program with a command line argument. solver_arguments is an array containing additional CPLEX solver commands With these parameters, the command line call is: 'solver_precommand' cplex -c 'read flexModel3.mps' 'solver_command1' 'solver_command2' ... 'solver_command_last' 'opt' 'write flexModel3_cplex.sol' 'quit' How to enable/disable outputs Some outputs need to be explicitly added in order to output them. This is to reduce the result processing time. Each optional output can be added to the enable_optional_outputs parameter array of the model object. The additional outputs are: ramp_envelope : Includes seven parameters that form the ramp room envelope (how much there is additional ramping capability in a given node). node_balance_t : Produces detailed inflows and outflows for all the nodes for all timesteps. Mainly useful to diagnose what is wrong with the model. connection_flow_separate : Produces the connection flows separately for both directions. Similarly, some outputs can be disables to reduce the result processing time. To do so, add the output name to the disable_optional_outputs parameter array of the model object. The allowed outputs to disable are: unit_flow_t : The flows from units to the nodes for each timestep. connection_flow_t : The flows between the nodes for each timestep. These can be replaced by group outputs (e.g. all wind power plant outputs are aggregated into one). How to make the Flextool run faster The list below contains potential ways to decrease the run-time of FlexTool models. External changes (results will remain the same): Keep both the input database and Flextool on the same drive. If the database is on a different drive, it can slow the process. Avoid network drives. Try to ensure that there is sufficient memory available by closing other programs that use lot of memory. Linear optimization problems can require lot of memory. Use as fast computer as available. Both faster processors and more processors can decrease computation time. Model changes (results will remain the same): Disable outputs that you don't need. This will speed up the result processing. See: How to enable/disable outputs Especially with MIP problems, considering using a commercial solver like CPLEX (license required). See: How to use CPLEX as the solver Model changes (results will be affected): Get rid of integer variables. Mixed integer programming can increase the solving time manyfold compared to the linear version especially if commercial solver is not available. MIP parameters are: transfer_method : exact , change to reqular startup_method : binary , change to linear Model changes (potentially large changes to the results --> need to understand how the particular analysis will be affected): Use representative periods for investment decisions. See: How to create a multi-year model Split the timeline into parts. The solving time increases exponentially with the model size. Multiple smaller solves can be faster. Splitting is best done with Rolling window solve and Nested rolling solve. See: How to use a rolling window for a dispatch model , How to use Nested Rolling window solves (investments and long-term storage) Aggregate data. Technological: Combine power plants that are using the same technology. Spatial: Combine nodes. Temporal: Use longer timesteps.","title":"How to"},{"location":"how_to/#how-to","text":"How-to section contains examples on how to include common energy system components in your model. The examples assume that you have sufficient understanding of FlexTool basics (e.g. by doing the tutorial). Each example will either include an example database file that is located in the 'how to examples databases' folder or the example is included in the init.sqlite as a scenario. If the example is in its own database, you can switch to that database by selecting the 'input' data store in the workflow and then changing the database by clicking the folder icon next to the current database file path in the 'Data store properties' widget. Navigate to the 'how to example databases' folder and choose the appropriate database. This section is divided into two parts: Building parts of the model: How to create a PV, wind or run-of-river hydro power plant How to connect nodes in the same energy network How to set the demand in a node How to add a storage unit (battery) How to make investments (storage/unit) How to create combined heat and power (CHP) How to create a hydro reservoir How to create a hydro pump storage How to add a reserve How to add a minimum load, start-up and ramp How to add CO2 emissions, costs and limits How to create a non-synchronous limit How to see the VRE curtailment and VRE share results for a node Setting different solves: How to run solves in a sequence (investment + dispatch) How to create a multi-year model How to use a rolling window for a dispatch model How to use Nested Rolling window solves (investments and long-term storage) General: How to use CPLEX as the solver How to enable/disable outputs How to make the Flextool run faster","title":"How-to"},{"location":"how_to/#how-to-create-a-pv-wind-or-run-of-river-hydro-power-plant","text":"(init.sqlite scenario: wind) init - west - wind These three power plant types don't use any commodities (i.e. fuels), but are instead dependant on a timeseries profile. To create these plants one needs an output node, an unit and a profile. The unit only needs parameters: is_active : yes existing : [The maximum capacity of the plant] Additionally these parameters should be at their default values: conversion_method : constant_efficiency efficiency : 1 The profile object only has one parameter: profile . It is a timeseries map which tells what fraction of the capacity the plant can produce at each timestep. The relationships unit__outputnode : (plant|output node) and unit__node__profile : (plant|output node|profile) need to be both created. The unit__node__profile relationship needs a parameter profile_method that has three options: upper_limit , lower_limit and exact . It states how the profile is considered. In most cases the upper_limit option should be used as it allows the plant to curtail the production if there is more supply than demand. Otherwise the output node might have to use downward_penalty to spill energy. The same profile can be used for multiple unit__outputnode s (and that is why the profile is not a unit parameter but its own entity).","title":"How to create a PV, wind or run-of-river hydro power plant"},{"location":"how_to/#how-to-connect-nodes-in-the-same-energy-network","text":"(connections.sqlite) Typically nodes are used to maintain an energy balance and therefore they are used to represent a location with demand or a storage. The nodes can pass energy to each other through a connection entity. This is often an electricity connection but it can be any form of energy (or matter) moving between two nodes. To create a connection one needs: two nodes connection relationship connection__node__node to tie these three together. The connection needs the parameters: is_active : yes existing : The maximum capacity of the connection [MW]. Applies to both directions. efficiency : represents the losses in transferring the energy. Same in both directions. Optional parameters: is_DC : yes , flag if the connection is counted as non-synchronous for the possible non-synchronous limit. If is_DC (direct current) is yes, then the connection is non-synchronous. More at: How-to create a non-synchronous limit transfer_method : Four options: regular (default), exact , variable_cost_only , no_losses_no_variable_cost . In most cases regular should be used. The downside of it is that it allows the flows to both directions at the same time, but the model does this only in specific circumstances when its beneficial to leak energy through the connection losses. For example, if connection capacity is 500 and efficiency 0.8, both nodes can send 500, but recive only 400 reducing the incoming energy by 100 in both nodes without any cost. Typically the model does not want to produce extra energy as it usually has costs, but it can happen if there is a cost to curtailing energy generation from a free source or if a unit is forced to generate at some level ('e.g. using profile_method : 'equal'). If non-synchronous constraint is used with a node using this connection, use exact instead as regular connections can circumvent this limit. Exact method does not allow flow in both directions at the same time, but it requires a binary variable, which will be computationally heavier (especially if the model would otherwise be fully linear). Variable_cost_only can be used when there are no losses associated with the flow. It allows costs related to the flow, but if losses are to be included, it should not be used. The no_losses_no_variable_cost can be used when the connection has no losses and no variable costs accociated with the flow. It is computationally the most efficient method, as it uses only one variable for the flow (the variable becomes negative for the other direction, but this can work only when there are no losses or variable costs). It also prevents simultanoues flow to both directions. The results of connections can be seen from the node_balance table. However, these are the results from all the connections connected to the node. If you want to have the results from an individual connection or specified connections, you can create a group of connection_nodes ( group_connection_node ) with a parameter output_results set to yes . This will produce sum_flow` results from the connection to the node. The example database shows a connection between a two node system where the other node has a wind power plant and the other node has a coal power plant.","title":"How to connect nodes in the same energy network"},{"location":"how_to/#how-to-set-the-demand-in-a-node","text":"(demand.sqlite) The demand in a node is set with the inflow parameter. When the node is consuming energy or matter, the values should be negative and when the node is supplying energy (or matter) the values should be positive. The inflow parameter accepts two types of data: Constant Timeseries map If the model is using multiple periods, then the same timeseries profile is used for every period. However, the inflow can be scaled for different periods with the inflow_method parameter: - scale_to_annual_flow : This will multiply the demand with a constant to make the summed inflow to match the annual_flow . This requires the node parameter annual_flow that is a map of periods containing the annual flow for each period. The sum of inflows is divided by the period's share of the year (hours in period /8760) before scaling (so that the annual energy demand/supply matches the annual_flow no matter what parts of the year are used to represent the full year). - scale_in_proportion : calculates a scaling factor by dividing annual_flow with the sum of time series inflow (after it has been annualized using timeline_duration_in_years ). This does not force the demand/supply to match annual flow in case the representative periods are not representing the full year, but the time series will still be scaled to capture the proportional change in the annual_flow parameter. - scale_to_annual_and_peak_flow : The inflow scaled so that the peak is at the given peak_flow and the inflow sums to annual flow of the period. This is done by the following equation: new_inflow = (peak/peak_old)*(1+c)*old_inflow-peak*c where c = [(peak/peak_old)*(8760/hours_in_period)*sum(old_inflow) - annual_flow] / [peak*8760 - (peak/peak_old)*(8760/hours_in_period)*sum(old_inflow)] Examples of all these options are shown in the demand.sqlite.","title":"How to set the demand in a node"},{"location":"how_to/#how-to-add-a-storage-unit-battery","text":"(init.sqlite, scenario: wind_battery) init - west - wind - battery In the Init SQLite database, there is a scenario wind_battery . In the example, the wind_plant alone is not able to meet the load in all conditions, but the battery will help it to improve the situation. In FlexTool, only nodes can have storage. Nodes can therefore be demand nodes, storage nodes or both. To make a storage node one the required parameters are: is_active : yes has_balance : yes has_storage : yes existing : The maximum storage size of battery as the potential energy [MWh] penalty_up : a large number to prefer not creating energy from nowhere penalty_down : a large number to prefer not creating energy from nowhere Additional parameters: self_discharge_loss The fraction of energy loss in each hour. Storage states can be tied to a value. For this three methods are introduced: storage_start_end_method : Fixes start and/or end state of the storage to a chosen value. This is for the start and the end of the whole model timeline (not for individual solves in case the model is rolling forward). storage_state_start and storage_state_end set these values. storage_bind_method : Forces the start and end values to be the same for the chosen time interval (timeblock, period or solve) storage_solve_horizon_method : Fixes the state of the storage at the end of the solve horizon or sets a price for the stored energy at the end of the solve horizon storage_state_reference_value and storage_state_reference_price set these values Having multiple storage methods can create infeasible problems. This is why some of the combinations shouldn't (and cannot) be used at the same time. If multiple methods are used, some of them might be ignored by the method hierarchy. More information can be found from Model Parameters: Using nodes as storages . Battery also needs charging and discharging capabilities. These could be presented either with a connection or by having a charging unit and a discharging unit . In here, we are using a connection called battery_inverter . Please note that the efficiency parameter of the connection applies to both directions, so the round-trip efficiency will be efficiency squared. The transfer_method can be used by all types of connections, but in this case it is best to choose regular , which tries to avoid simultaneous charging and discharing, but can still do it when the model needs to dissipate energy. exact method would prevent that, but it would require integer variables and make the storage computationally much more expensive. Model leakage will be reported in the results (forthcoming). The required paremeters of the connection are: is_active : yes existing : The capacity of energy transsmission [MW] transfer_method : (see above) Additional parameters: efficiency : by default 1 Finally connection_node_node relationship is needed between inverter, the battery and the demand node (west).","title":"How to add a storage unit (battery)"},{"location":"how_to/#how-to-make-investments-storageunit","text":"(init.sqlite scenario: wind_battery_invest) init - west - wind - battery - battery_invest Here we will use the previous battery scenario to represent the investment options in the tool. The solve will invest only if it has an array of invest_periods set, telling the periods where it is allowed to make investment decisions. In a multi solve investment model (rolling investments) it can be useful to separately set invest_realized_periods so that the investment results get reported only from the chosen periods from each solve (in order to avoid overlapping reporting of investment decisions that are replaced by investment decisions in later solves). Furthermore, realized_periods will define the solves and periods from which the dispatch results are output into results. First, the investment parameters need to be included both for the battery_inverter and battery objects: invest_method - the modeller needs to choose between only_invest , only_retire , invest_and_retire or not_allowed invest_cost - overnight investment cost new capacity [currency/kW] for the battery_inverter and [currency/kWh] for the battery . Other one can be left empty or zero, since they will be tied together in the next phase. Here we will assume a fixed relation between kW and kWh for this battery technology, but for example flow batteries could have separate investments for storage and charging capacities. interest_rate - an interest rate [e.g. 0.05 means 5%] for the technology that is sufficient to cover capital costs. The chosen interest rate should reflect the assumption that in the model economic lifetime equals the technical lifetime. lifetime - technical lifetime of the technology to calculate investment annuity (together with the interest rate) Additional parameters: invest_max_total : maximum investment (power [MW] or energy [MWh]) to the virtual capacity of a group of units or to the storage capacity of a group of nodes. In the same way investment limits can be set for total and period, investment and retirement, min and max lifetime_method : Model can either be forced to reinvest when the lifetime ends reinvest_automatic or have a choice reinvest_choice salvage_value : Sets the extra value that can be gained for retiring [CUR/kW] fixed_cost : Annual cost for capacity [CUR/kW] retire_forced : forces to retire at least this amount of capacity In many cases some of the investment decisions are tied to each other. Here the battery capacity and the connection capacity of the battery_inverter will be tied as they are simultaneously limited by the choice of the battery technology to be invested in. To model this, a new constraint needs to be created that ties together the storage capacity of the battery and the charging/discharging capacity of the battery_inverter . A new constraint object battery_tie_kW_kWh is created and it is given parameters constant , is_active and sense . Constant could be left out, since it is zero, but is_active must be defined in order to include the constraint in the battery_invest alternative . The sense of the constraint must be equal to enforce the kw/kWh relation. Both battery_inverter and battery need a coefficient to tell the model how they relate to each other. The equation has the capacity variables on the left side of the equation and the constant on the right side. sum_i(`constraint_capacity_coefficient` * `invested_capacity`) = `constant` where i is any unit, connection or node that is part of the constraint When the constraint_capacity_coefficient for battery is set at 1 and for the battery_inverter at -8, then the equation will force battery_inverter capacity to be 8 times smaller than the battery capacity . The negative term can be arranged to the right side of the equation, which yields: 1 x *battery* = 8 x *battery_inverter*, which can be true only if *battery_inverter* is 1/8 of *battery* constraint_capacity_coefficient is not a parameter with a single value, but a map type parameter (index: constraint name, value: coefficient). It allows the object to participate in multiple constraints. Finally, FlexTool can actually mix three different types of constraint coefficients: constraint_capacity_coefficient , constraint_state_coefficient and constraint_flow_coefficient allowing the user to create custom constraints between any types of objects in the model for the main variables in the model ( flow , state as well as invest and divest ). So, the equation above is in full form: + sum_i [constraint_capacity_coefficient(i) * invested_capacity] where i contains [node, unit, connection] belonging to the constraint + sum_j [constraint_flow_coefficient(j) * capacity] where j contains [unit--node, connection--node] belonging to the constraint + sum_k [constraint_state_coefficient(k) * capacity] where k contains [node] belonging to the constraint = constant where 'capacity' is existing capacity plus invested capacity","title":"How to make investments (storage/unit)"},{"location":"how_to/#how-to-create-combined-heat-and-power-chp","text":"(init.sqlite scenario: coal_chp) init - west - coal_chp - heat First, a new heat node is added with the necessary parameters. The nodes can be used for energy form of energy or matter, so the heat demand node does not differ from the electricity demand node. The required parameters are: is_active : yes has_balance : yes inflow : Map for the heat demand (negative) [MW] penalty_up : a large number to prefer not creating energy from nowhere penalty_down : a large number to prefer not creating energy from nowhere The heating systems tend to have some level of storage capability, so one could also add storage parameters to the node as well, but here they are not used. Then the coal_chp unit is made with a high efficiency parameter, since CHP units convert fuel energy to power and heat at high overall rates. In FlexTool, efficiency is a property of the unit - it demarcates at what rate the sum of inputs is converted to the sum of outputs. However, without any additional constraints, the unit is free to choose in what proportion to use inputs and in what proportion to use outputs. In units with only one input and output, this freedom does not exist, but in here, the coal_chp needs to be constrained as otherwise the unit could produce only electricity and no heat at 90% efficiency, which is not feasible. This CHP plant is an another example where the user defined constraint (see the last equation in the previous example) is used to achieve the desired behaviour. In a backpressure CHP, heat and power outputs are fixed - increase one of them, and you must also increase the other. In an extraction CHP plant the relation is more complicated - there is an allowed operating area between heat and power. Both can be represented in FlexTool, but here a backpressure example is given. An extraction plant would require two or more greater_than and/or lesser_than constraints to define an operating area. Electricity and heat outputs are fixed by adding a new constraint coal_chp_fix where the heat and power co-efficients are fixed. You need to create the two relationships unit__outputNode , for coal_chp--heat and coal_chp--west . As can be seen in the bottom part of the figure below, the constraint_flow_coefficient parameter for the coal_chp--heat and coal_chp--west is set as a map value where the constraint name matches with the coal_chp_fix constraint object name. The values are set so that the constraint equation forces the heat output to be twice as large as the electricity output. Create constraint coal_chp_fix object with parameters: is_active : yes sense : equal constant : 0.0 Create unit_outputNode (coal_chp|heat): constraint_flow_coefficient : coal_chp_fix , -0.5 Create unit_outputNode (coal_chp|west): constraint_flow_coefficient : coal_chp_fix , 2 Again, the negative value can be turned positive by arranging it to the right side of the equality, creating this: 1 x *electricity* = 0.5 x *heat*, which is true only if *heat* is 2 x *electricity*","title":"How to create combined heat and power (CHP)"},{"location":"how_to/#how-to-create-a-hydro-reservoir","text":"hydro_reservoir.sq Note! This example concerns a single reservoir hydro power plant. If the river system has multiple plants in a series and their operations are tied, then multiple nodes and units are needed to represent the system. The objective is to create a hydro power plant with a reservoir and connect it to a demand node. Hydro reservoir power plant requires three components: Reservoir node Hydro unit Output node It can be useful to create a new alternative for these components to be able to include and exclude them from the scenarios. The reservoir is made with a node as only nodes can have storage in FlexTool. The incoming water can be represented by the inflow parameter. It can be a constant or a time variant. The unit of the inflow should be the power that can be created from the quantity of the incoming water at maximum efficiency [MW]. In the same way, the existing storage capacity should be the maximum amount of stored energy that the reservoir can hold [MWh]. In this implementation of reservoir hydro power, there is an option to spill water (energy) from the storage so that it does not run through the plant. The simplest way of allowing spilling is setting the downward penalty of the node to 0. This way the energy can disappear from the storage without a cost. The quantity of spilled energy can be seen from the results as the 'downward slack' of the node. The required parameters of the reservoir node are (node_c and node_t sheets if using Excel input data): is_active : yes has_balance : yes has_storage : yes inflow : Mapping of the incoming water as the potential power [MW] existing : The maximum size of the reservoir as the potential energy [MWh] penalty_up : a large number to prefer not creating energy from nowhere penalty_down : 0 or a large number (spilling or not) a storage_method to set the behaviour on how the storage levels should be managed - for short duration storages bind_within_timeblock may be best and for seasonal storages it could be best to use bind_within_solve . If historical storage level time series are available, it can be beneficial to use fix_start in the storage_start_end_method together with storage_solve_horizon_method use_reference_value , which will pick the storage level at the end of each solve from the time series provided as a reference ( storage_state_reference_value ). The unit is connected to the reservoir node and the output node nodeA (unit_c and unit_node_c in excel): The efficiency of the unit can be set to 1 as the inflow time series are directly expressed in MWh (using piecewise linear efficiency is naturally possible). Set existing capacity [MW] is_active : yes Create relations unit__inputNode : hydro_plant | reservoir and unit__outputNode : hydro_plant | nodeA .","title":"How to create a hydro reservoir"},{"location":"how_to/#how-to-create-a-hydro-pump-storage","text":"(hydro_with_pump.sqlite) For a hydro pump storage one needs the following components: Demand node hydro_plant unit with storage node , hydro_pump unit with pump storage node a source for external energy (pumped storage plant will lose energy due to charging losses) For the demand node and the hydro plant we will use the same components as in the previous hydro_reservoir example. With the difference that both demand and hydro_plant capacities are doubled. Wind power plant will be used as a source for external energy. First create the pump_storage. This is the downstream storage from the hydro plant. Again it should have the parameters as the reservoir: is_active : yes has_balance : yes has_storage : yes existing : The maximum size of the storage [MWh]. Note that this really represents the mass of the water and it should be converted as the potential of the energy of the reservoir-plant system. So that 1 liter of water has the same energy in both storages. penalty_up : a large number to avoid creating energy from nowhere penalty_down : 0 In this example database, we have both a closed system and a river system. The difference is that in the closed system the inflow is zero in both reservoir and pump_storage. In river system we have the incoming water for the reservoir as in the reservoir example. In the downstream pump storage we implement a outflow as the negative inflow representing the minimum amount of water that has to flow out of the system at each timestep to not dry out the river. The penalty_down is set as 0 to allow it let more water go when it needs to, otherwise the storages will keep filling up if the incoming water is larger than the minimum outgoing water. The storage level fixes should be the same in both storages (reservoir and pump storage). Here: fix_start_end_method : fix_start storage_state_start : 0.5 bind_storage_method : bind_with_timeblock This sets the starting storage levels to be 50%. The binding will also constrain the state of the storage at the end of of each timeblock to be the same as in the beginning of the timeblock. Then create the pump unit. It only needs three parameters: efficiency = 1, The real efficiency of the pump is set elsewhere, so use 1.0 here. existing : The wanted capacity is_active : yes Set the relationships as follows: unit_outputNode for (hydro_plant | nodeA), (hydro_plant | pump_storage ), (hydro_pump | reservoir) unit_inputNode for (hydro_plant | reservoir), (hydro_pump | pump_storage), (hydro_pump | nodeA) Your system should look something like: Next comes the tricky part of preserving the water and energy as both are represented as generic energy in the model. This is done by setting extra coefficents and constraints to the flows. First the hydro_plant needs to both create the energy for the demand node and pass the mass to the pump_storage. This is done by doubling the efficiency in this example to 2 and setting a extra constraint to force the output flows to both the demand node and the storage to be the same. For the hydro plant: Efficiency : 2 Create a new constraint (here plant_storage_nodeA_split ) and add the parameters: is_active : yes sense : equal constant : 0.0 And for the unit_outputNodes : (hydro_plant | nodeA) constraint_flow_coefficient Map: plant_storage_nodeA_split , 1 (hydro_plant | pump_storage) constraint_flow_coefficient Map: plant_storage_nodeA_split , -1 Meaning: flow to nodeA - flow to pump_storage = 0 As for the pump storage, we will have to make sure that the same amount of water leaves the pump_storage and enters the reservoir. Also it still should use electricity from the demand node without increasing the amount of water that is moving from storage to another. First to prevent the energy from the demand node from increasing the water flow, add a coefficient to the flow between the demand node and the pump. unit_inputNode (hydro_pump|nodeA): - Coefficient : 0 (Default is 1) This prevents the water amount from increasing as: unit_output_flow = coeff1 * unit_input_flow1 + coeff2 * unit_input_flow2. We still have to make the unit to consume electricity even though it does not affect the unit output directly. This is done by setting a new constraint to tie the flows to the pump unit from pump storage and the nodeA. Add a constraint (here pump_storage_nodeA_fix ) the with the parameters: is_active : yes sense : equal constant : 0.0 And setting parameters for unit_outputNode and unit_inputNode : (hydro_pump | nodeA) constraint_flow_coefficient Map: plant_storage_nodeA_split , 2 (hydro_pump | pump_storage) constraint_flow_coefficient Map: plant_storage_nodeA_split , -1 2 * flow_from_nodeA - flow_from_pump_storage = 0 Note that here the ( constraint_flow_coefficient Map: plant_storage_nodeA_split , 2) actually sets the efficiency of the pump. This means that here only half of the electricity used by the pump can be recovered when that amount of water is used by the hydro_plant. (Two units of energy are used to move 1 unit of water_energy) The constraint_flow_coefficient for pump_input should therefore be (1/efficiency)","title":"How to create a hydro pump storage"},{"location":"how_to/#how-to-add-a-reserve","text":"(init.sqlite: scenario network_coal_wind_reserve) In FlexTool, reserves are defined for a group of nodes. If there is a need to have a reserve requirement for a single node, it needs its own group. Therefore, when creating a reserve, the first step is to add a new group (e.g. electricity ) with all member nodes (e.g. west , east and north ) using the group__node relationship class. Then, a new reserve categories can be added (e.g. primary ) to the reserve object class. Finally, make sure there are up and down objects in the `UpDown' object class. These are hard-coded names in FlexTool and need to be used when creating reserves. Next, the reserve requirement will be defined. A relationship between in the reserve__upDown__group class (e.g. primary--up--electricity ) allows to define the reserve parameters reserve_method , reservation (i.e. the amount of reserve) and penalty_reserve (i.e. the penalty cost in case of lack of reserve). For example, a constant of 10 MW could be used. Even though the name of the reserve_method is timeseries_only , it can also accept a constant value - it's an exogenous reserve requirement whereas the other two reserve methods are endogenous. Dynamic reserve method calculates the reserve requirement from generation and loads according to user defined factors ( increase_reserve_ratio ). Largest failure method will force enough reserve to cope with a failure of the chosen unit and connection flows. Parameters from the reserve__upDown__unit__node class should be used to define how different units can contribute to different reserves. Parameter max_share says how large share of the total capacity of the timestep (existing * efficiency * (profile)) of the unit can contribute to this reserve category (e.g. coal_plant may be limited by ramp constraint to provide only 1% of its capacity to an upward primary reserve.) Meanwhile, parameter reliability affects what portion of the reserved capacity actually contributes to the reserve (e.g. wind_plant may contribute only 80% of its generation to reserve due to uncertainty).","title":"How to add a reserve"},{"location":"how_to/#how-to-add-a-minimum-load-start-up-and-ramp","text":"(ramp_and_start_up.sqlite) Some plants cannot vary their output freely, but have some cost and limits associated with it. In this example we will add the minimum load behaviour to a coal_plant unit and add the cost and limits for starting up and ramping the plant respectively. Minimum load requires that the unit must have an online variable in addition to flow variables and therefore a startup_method needs to be defined and an optional startup_cost can be given. The startup_cost is added to the total cost every time the unit is required to start-up. Here we use a value 1000 (Currency/MW started up). The options for the startup_method are no_startup , linear and binary . binary would require an integer variable so linear is chosen. However, this means that the unit can startup partially. The minimum online will still apply, but it is the minimum of the online capacity in any given moment ( flow >= min_load x capacity x online ), where 0 <= online <= 1. The online variable also allows to change the efficiency of the plant between the minimum and full loads. A unit with a part-load efficiency will obey the following equation: + sum_i[ input(i) * input_coefficient(i) ] = + sum_o[ output(o) * output_coefficient(o) ] * slope + online * section where slope = 1 / efficiency - section and section = 1 / efficiency - ( 1 / efficiency - min_load / efficiency_at_min_load) / ( 1 - min_load ) By default, input_coefficient and output_coefficient are 1, but if there is a need to tweak their relative contributions, these coefficients allow to do so (e.g. a coal plant might have lower efficiency when using lignite than when using brown coal). The input is required at different ouput levels is shown in the figure below, when Capacity = 100, Efficiency = 0.8, Minimum load = 0.6 and Efficiency at minimum load = 0.5. Next we will add ramp limits. With the ramping limits, the user can force the change of a flow from a unit to be below a certain value each timestep. The ramping is an attribute of the flow. Therefore it does not require the minimum load behaviour and its parameters are added to the unit_outputNode relationship: ramp_method : ramp_cost, ramp_limit or both. Only ramp limit is currently implemented (August 2023). ramp_speed_up : Limit on how fast the plant can ramp up. (fraction of unit / min) ie. Value 0.01 allows the change of 60% of capacity per hour. ramp_speed_down : Limit on how fast the plant can ramp down. (fraction of unit / min) ie. Value 0.01 allows the change of 60% of capacity per hour. ramp_cost : NOT YET IMPLEMENTED. The cost of ramping the capacity. [CUR/MW]","title":"How to add a minimum load, start-up and ramp"},{"location":"how_to/#how-to-add-co2-emissions-costs-and-limits","text":"(init.sqlite scenario: coal_co2 ) init - west - coal - co2_price - co2_limit Carbon dioxide emissions are added to FlexTool by associating relevant commodities (e.g. coal ) with a co2_content parameter (CO2 content per MWh of energy contained in the fuel). The other CO2 parameters are handeled through a group of nodes (Here coal_price or coal_limit groups ). Therefore one needs to create a group and add all the nodes that supply these commodities to a group with a group_node relationship. (Here the relationship co2_price--coal_market ) To set a price one needs to create set the co2_method parameter to price (constant) and create the co2_price parameter with the desired value. This price is added to the price of the commodity. Alternatively one can set a limit on the co2 used by setting the co2_method parameter to period and setting the co2_max_period (periodic map) parameter. If both methods price and period are to be used, then they need to use different groups . The groups can include the same nodes .","title":"How to add CO2 emissions, costs and limits"},{"location":"how_to/#how-to-create-a-non-synchronous-limit","text":"(non_sync_and_curtailment.sqlite) (scenario: non_sync) Non-synchronous limit is a property of a group of nodes. It states that the non-synchronous flow to the group of nodes cannot exceed a set share of the input flows at any timestep. To demonstrate this, we have set a system with a coal plant, a wind plant and a single demand node. However, it can be done to a group of nodes with unlimited number of plants or connections connected. So, one can limit the non-synchronous share of individual nodes or of the whole system. The flows between the nodes of the group are excluded. The non-synchronous limit is set to a group of nodes with one or multiple members. Note: These are set to the group with group_node relationship, not with group_node_unit relationship! Create a group (here nodeA_group ) and set a group_node relationship (nodeA_group |nodeA). Then add parameters: has_non_synchronous : yes non_synchronous_limit : 0.5 penalty_non_synchronous : 4000 This forces the non-sync flow to be at max 50% of the incoming flow to the nodeA. The penalty should be always set as in some cases there is no other way to keep the constraint feasible (and it will be difficult to find the reason why the model does not solve). The existence of the non-synchronous penalty in your results indicates that this constraint has been violated and you should investigate the reason for this in your system. If the penalty_non_synchronous is lower than the upward_penalty of the demand node , the system will prefer breaking the non-sync constraint instead of the node balance equation. In other words, it will not curtail the production of profile plants if the demand is not satisfied even though it will break the non-synchronous penalty. If it is higher, the curtailment will take place instead. When having a connection to a storage from a node with this constraint, the best practice is to add this storage node to the group as well. This excludes the flows to and from the storage in the calculation of the non-synchronous ratio. However, if you want to have these flows in the calculation, you have two options depending on if you want the flow to be synchronous or not. If it is non-synchronous, just set the connection parameter is_DC : yes. If it is synchronous (e.g., some flywheels), an issue arises with the reqular connection as it now can reduce the ratio with equal simultaneous flow in both directions. To prevent the simultaneous flow to both directions you need to set the transfer_method : exact . This will increase the solving time significantly as it will use integer variables (so, better to add the storage node to the node group with a non-synchronous limit). Then set which plants and connections are considered non-synchronous by adding parameters: unit_outputNode : - is_non_synchronous : yes Connection_node_node : - is_DC : yes Here the (wind_plant|nodeA) relation has the is_non_synchronous parameter and battery connection is_DC parameter. A connection with transfer_method : no_losses_no_variables between a node included in a group with a non-synchronous limit and a node outside of the group is not allowed. The flow in this kind of a connection is presented with a single variable, which would not function correctly with the non-synchronous limit constraints (there is a non-linearity at zero that requires two variables). If you want to see the individual flows in the results you can create separate groups for the flows and add group_unit_node relations to it. To produce the flow results, the groups need the parameter. output_results : yes Here we have coal_flow group with group_unit_node relation coal_flow|coal_plant|nodeA and wind_flow group with group_unit_node relation wind_flow|wind_plant|nodeA.","title":"How to create a non-synchronous limit"},{"location":"how_to/#how-to-see-the-vre-curtailment-and-vre-share-results-for-a-node","text":"(non_sync_and_curtailment.sqlite) (scenario: curtailment) When the system has profile-units with the profile_method : upper_limit, the model can curtail the unit's flow to avoid penalties. The curtailment could take place for several reasons: the supply is higher than the demand and the energy cannot be stored or transferred (further) non-synchronous limit extra flow constraints have been set other unit specific constraint affecting how VRE units or other units are forced to behave (ramp, start-up ...) To see the curtailment results you need to add a group of nodes ( group_node not group_unit_node !) with one or more members. The group then needs the parameter: output_results : yes This produces the group : indicator result to the Results database and group_summary table to the excel. These changes were done to the previous non-sync example database. Note: The results are the share of curtailment in relation to the inflow (demand) so it can exceed 100% as seen in the figure.","title":"How to see the VRE curtailment and VRE share results for a node"},{"location":"how_to/#how-to-run-solves-in-a-sequence-investment-dispatch","text":"(init.sqlite scenario: 5weeks_invest_fullYear_dispatch_coal_wind) In this example, investment decisions are made using a five week sample of a year and then the dispatch is solved with the full year timeline using these investments. To do this you need two solves: Investment solve Dispatch solve Both solves should solve the same periods using different timeblockSet to represent these periods. This example has only one period p2020 describing a year. The investment solve uses a representative sample timeblockSet 5weeks to do the investment decisions. These are then passed to the dispatch solve that uses complete timeline fullYear . Investment solve requires the parameters: Invest_periods : Array of periods where investments can be made realised_invest_periods : Array of periods that are output for investment decisions period_timeblockSet : Uses the 5weeks as the timeblock Note that the realized_invest_periods is used instead of realized_periods , because we want the investment solve to only output investments. Additionally some of the units, connections or storages will need investment parameters ( invest_cost , lifetime ...) see How to make investments (storage/unit) The dispatch solve requires the parameters: realized_periods : Array of output periods period_timeblockSet : Uses the fullYear as the timeblock The sequence of solves is defined by the model parameter solves . Here it is an array where the first item is an investment_solve 5weeks_only_invest and the second is the dispatch solve y2020_fullYear_dispatch . This is enough for the model to know to pass the investment decisions of the period to the period of the same name in the second solve. Note that the picture has two model : solves parameters defined one for each alternative. Only the parameter from the 5weeks_only_invest is used as the lower alternatives in the scenario tree override the values from the higher alternatives and only one model can be run.","title":"How to run solves in a sequence (investment + dispatch)"},{"location":"how_to/#how-to-create-a-multi-year-model","text":"A multi-year model is constructed from multiple periods, each presenting one year. In the example case, each year is otherwise the same, but the demand is increasing in the west node . This means that all periods can use the same timeblockset 5weeks from the same timeline y2020 , but one can also make separate timelines for each year, if data is available for this. The inflow time series are scaled to match the value in annual_flow that is mapped for each period. The model is using the inflow_method scale_to_annual in order to achieve this (default is use_original that would not perform scaling). There should also be a discount_rate parameter set for the model object flexTool if something else than the model default of 5% (0.05 value) is to be used. A multi-year model could be solved at one go (multi_year_one_solve) or by rolling through several solves (multi-year) where each solve has a foresight horizon and a realisation horizon. Next we will go through both options.","title":"How to create a multi-year model"},{"location":"how_to/#multi-year-with-one-solve","text":"(init.sqlite scenario: multi_year_one_solve) In this example, one solve is used for all the four periods. All the four periods need to be added to the solve arrays invest_periods and realized_periods . Here the same timeblock is used for all the four periods, so only difference between them is the increasing inflow set above. The parameters that need to be added to the solve object: years_represented parameter is used by the model to calculate the discounting factors for the periods in the model (often future years). It should state the number of years each period will be representing. For example, a period for 2025 could represent the years 2025-2029 if its years_represented is set to 5. Any investments would be taking place at the start of 2025 and discounted to the beginning of 2025, but the operational costs would accrue from each year in 2025-2029 each with a different discounting factor (decreasing based on the interest rate). invest_periods the periods in which the model is allowed to make investments. realized_periods the periods that will be realized in this solve (outputs dispatch results for these periods). period_timeblockset defines the set of representative 'periods' (timeblocks in FlexTool) to be used in each FlexTool period .","title":"Multi year with one solve"},{"location":"how_to/#multi-year-with-rolling-solves","text":"(init.sqlite scenario: multi_year) If the solving time gets too big, there is an option to split the timeline into overlapping parts and solve them separately. This shortens the solving time as it increases exponentially as the model grows. Therefore, collection of smaller solves is faster. The drawback is that the accuracy will be affected if there are dependencies with a larger time interval than the split size. When dealing with investments the splitting only works if the different periods are similar, in most cases complete years. If the first solve is really windy, it would invest too much on wind which wouldn't produce enough energy in later solves and then it would need to invest again to something else. It can also be challenging to consider lifetimes. If the option of retiring is allowed, it might retire something that is needed for later solves. In this example, the periods are complete years and the only difference between periods is increased demand. The model rolls through several solves and therefore, the model object flexTool has four values in the solves array. Each value represents one solve and it's position in the sequence of solves. The next figure illustrates the realization (blue) and foresight horizons (grey). The first solve will solve both the year 2020 and year 2025, but it will only output the year 2020. The next will solve both 2025 and 2030 but only output 2025. Next figure shows the values needed to define one solve (out of the four solves in the example). Each of these need to be repeated for each solve in the model. years_represented parameter is used by the model to calculate the discounting factors for the periods in the model (often future years). It should state the number of years each period will be representing. For example, a period for 2025 could represent the years 2025-2029 if its years_represented is set to 5. Any investments would be taking place at the start of 2025 and discounted to the beginning of 2025, but the operational costs would accrue from each year in 2025-2029 each with a different discounting factor (decreasing based on the interest rate). invest_periods the periods in which the model is allowed to make investments. To be given for each solve. realized_periods the periods that will be realized in this solve (outputs dispatch results for these periods). To be given for each solve. invest_realized_periods parameter states the periods that will realize the investment decisions. If not stated, it will use realized_periods . period_timeblockset defines the set of representative 'periods' (timeblocks in FlexTool) to be used in each FlexTool period . Note the the solve_mode : rolling_window is not used! This is not for investment runs (without nesting) as it rolls freely, and investments should only be made at the start of the period. This example is called 'manual rolling' later when those are discussed. In the init.sqlite, the solve objects have solver parameters: highs_method , highs_parallel and highs_presolve . They only affect the speed and not the results, but usually the default values are good enough and the user should only change them if they understand how the solvers work.","title":"Multi year with rolling solves"},{"location":"how_to/#how-to-use-a-rolling-window-for-a-dispatch-model","text":"A rolling window can be used for example when a dispatch model gets too big to be solved on one go. It splits the problem into multiple consecutive smaller problems. The rolling window solve splits the time dimension into overlapping parts and solves each one of them separately but in a sequence (and can therefore pass state information from the previous solve to the next one). For example, instead of a solving the full year in one go, you can split the year into six four-month long solves where each solve outputs only the first two months. The solves would therefore include the months: Roll: Solve months -> Output months 1: [1,2,3,4] -> [1,2] 2: [3,4,5,6] -> [3,4] 3: [5,6,7,8] -> [5,6] 4: [7,8,9,10] -> [7,8] 5: [9,10,11,12] ->[9,10] 6: [11,12] -> [11,12] The rolling solve could be setup also manually as described in the 'How to run a multi year model' - just using shorter periods. However, this would be tedious if there are many solves. In a rolling window model, the user can set the rolling_jump and rolling_horizon parameters, which are expressed in hours. rolling_horizon : sets the length of the whole solve, in hours. In previous example 4 months (2880 hours). Horizon allows the model to see bit further in the future to improve the decision making for the period that will be output. rolling_jump : sets the interval for the length of each 'jump' the model takes forward in reach roll. It is then both the interval of roll starting points and the length of the output for each roll. The rolling_jump must be smaller than the rolling_horizon . In the previous example the rolling_jump would be 2 months (1440 hours). In addition, the user has the possibility to use the other parameters to set the time interval where the rolling happens: rolling_start_time : Optional (timestamp), can be used to set a different starting point for the rolling than the first timestep (default). rolling_duration : Optional (hours), the length of combined rolls. In the example, it could be set to 8640 hours which would divide evenly, or 8760 hours which means that the last roll will be shorter than the others. It is nicer to use rolling_jump that is divisable with the rolling_duration to keep rolls even. If rolling_duration is not set, it defaults to rolling through the whole timeline. When using rolling window solve, you are solving the model with less information. Therefore, the results will be less optimal since the model will not have the full information at once. It is therefore important to know how this could affect the results and what things to consider when implementing a rolling window model. It will have an impact on time dependant parts of the model: for example, storages or cumulative flow constraints. If the model can see only a few months to the future, it can't see how much energy needs to be stored after that. Investments should not be used with this free rolling solve ( solve_mode : rolling_window ) as investments should only be done at the start of the periods. Both the long-term storage and the investments can be taken into account with nested rolling solves that have a separate how-to . Short term storages also are operated less optimally in a rolling window model. This is not necessarily a real problem, since perfect foresight linear optimization models are 'too optimal'. They don't reflect the forecast errors present in real life. So, a rolling window model might operate a bit more realistically than a single_solve model. A single_solve model can consider things happening far in the future when setting the storage level at present, even though in reality that information is not available. So, the total cost of a rolling_window model should always be higher than the total cost from a complete single_solve model that has perfect information. To set a dispatch rolling window model you need to set the object solve parameters: solve_mode : rolling_window rolling_jump : Hours, the desired length of the solve interval rolling_horizon : Hours, the desired length of each roll solve rolling_duration : (Optional) Hours, the length of the combined outputs. If not set, the whole timeline is used. rolling_start : (Optional) Hours, the starting timestep the whole solve, if not wanting to start from the beginning Considerations on the rolling times: The rolling_jump and rolling_horizon must be large enough to make the model faster. If too small intervals are used, the creation of solves and moving data from solve to another might take too much time. If you are not using 1-hour timesteps, preferably use multiples of the timestep you are using as the rolling_jump and rolling_horizon . The steps included in each solve are calculated by summing the step durations until they are larger or equal to the hours given. So, if multiples are not used, the rolls might not be exactly the same size. The model can roll over timeblock and period jumps, which might cause some issues if storage constraints are used. Using timeblock length or its multiples is therefore recommended. For example, the rolling_jump could be a half of a timeblock and the rolling_horizon whole timeblock or rolling_jump a timeblock and rolling_horizon three timeblocks. Of course, when running e.g. a full year dispatch, there is only one timeblock of 8760 hours, which makes the choices more simple. Considerations on storage parameters: storage_solve_horizon_method use_reference_value or use_reference_price are the preferred means to bind storage values. They can be used together with the storage_state_start_end_method : start , which would then set the initial storage state. These methods bind either the storage value or the storage price at the end of horizon (not the end of jump ). This allows the storage to use the part of the horizon that is not output to improve the behaviour of the storage in the part that is output (as defined by rolling_horizon and rolling_jump ). bind_within_timeblock does not work correctly if the rolls don't include whole timeblocks. Instead, it will bind the first step of the roll (whatever it is) to the end of the timeblock. Do not use in nested solves if you are not using whole timeblocks or its multiples as rolling_jump the same applies to the bind_within_period (but in relation to periods - do not use this unless you are rolling_jump is as long as a period or its multiples). storage_start_end_method can be used to set the first timestep of the first roll and/or the last timestep of the last roll (in conjunction with storage_state_start and storage_state_end ). bind_within_solve binds the start state to the end state of each roll not the start and end of the whole model timeline. Use with caution (and probably best not to use together with storage_solve_horizon_method use_reference_value ).","title":"How to use a rolling window for a dispatch model"},{"location":"how_to/#how-to-use-nested-rolling-window-solves-investments-and-long-term-storage","text":"The basic rolling solve can have problems in dealing with long term storage and with investments. If the model only sees a few weeks to the future, it really can't see how much energy should be stored in long term storages. Problems with investments can also be rampant: What if the first roll is really windy, so it would invest too much on wind which wouldn't produce enough energy in later rolls and then it would need to invest again to something else. How can it consider lifetimes? If the option of retiring is allowed, it might retire something that is needed for later rolls. Nested solve sequences can first solve the investments and long-term storage levels and pass them to the dispatch solve. Both storage solve and dispatch solve can be rolling solves. The dispatch solves can then send the end storage values to the investment and long-term storage solves as start values to reduce the error of these solves. When to use nested solves? Dispatch model is takes too long to solve, but simple rolling window solve would not represent the long-term storages correctly. (Nesting without the investment solve) Investment model takes too long to solve, even with manual rolling How to create a multi-year model . With nesting you can have smaller rolls for dispatch solve than the investment solve. (Nesting without the storage solve) Investment model takes too long and you have long term storages to consider. (Three level nesting, graph below) However, the obvious issue is that investment and storage solves cannot be solved using the old complete solve as it wouldn't make the solve time any shorter. Therefore, we need to decrease the information for investment and storage solves as well. There are a few options for this: Use lower resolution (longer timesteps). This can work quite well for a long-term storage. Use representative periods from the full timeline when performing investments. There is a large body of literature and methods on how to pick the representative weeks. Split the investment timeline (myopic investments) by manually creating a solve sequence for the investment solves like in: How to create a multi-year model section. This can be combined with the first or second option. Each of these have their pros and cons: Using the lower resolution can speed-up the model considerably, but it also means that everything that happens faster than the new timestep duration will be lost as the timestep varying parameters are averaged or summed for the new timestep. For example, consider a model with investment options to solar and storage. If the step duration is changed to 24 hours, the model won't invest in enough storage to mitigate the diurnal variation in PV. When these investments are then passed to the dispatch solve, the invested portfolio will have trouble meeting the demand. Using the sample can be effective if the sample is chosen well, but all the needs that are not in these samples are not included. The speed is heavily dependent on the number and size of those samples. Splitting the investment timeline for multi-year models can be seen as a relatively realistic approach, since investment decisions would have a lot of uncertainty in the longer time frame anyway. The investment decisions with less information are always less optimal than with complete solves. Therefore, when they are passed to the dispatch solve, it will in some cases cause penalties in the results when the invested portfolio is not sufficient to meet the demand at all times. The long term storage solve can be implemented using a lower resolution solve. The storage state values from the storage solves will be used to fix the storage value (or price) at the end of each dispatch solve. This means that on the last step of the roll (or the period), the storage quantity (or price) will have to match the quantity (or price) in the storage solve. The rolling_jump and rolling_horizon in the storage solve have to be longer than in the dispatch solve. You can set which storages are included as \"long term storages\" whose value will be transferred to the dispatch solve. To create a nested solve sequence, you need two or three solve objects. Either the investment solve or the storage solve can be left out. When using nested solve sequence, the sequence is not set with the model : solves parameter. Only the topmost solve is put there. Instead, the nested levels are set by the solve parameter contains_solve : solve_name . The investment solve is always on the top followed by the storage solve and dispatch solve: investment_solve solve parameter contains_solve : storage_solve_name storage_solve solve parameter contains_solve : dispatch_solve_name To create a storage solve: solve parameter fix_storage_period : Array of periods where the storage values are fixed in the lower solve. Should be the same as realized_periods for the dispatch solve. node parameter storage_nested_fix_method : fix_quantity or fix_price , includes this storage to be fixed. fix_price requires storage_state_reference_price to be set. To create an investment_solve: solve parameter invest_periods : Array of periods where the model can invest. solve parameter realized_invest_periods : Array of periods where the model will realize investment decisions to the lower solves and results. solve parameter realized_periods : Should not be used in this solve! You don't want the dispatch results from this solve, but from the dispatch solve. In addition, the rolling dispatch solve should be created as in the How to use rolling window solve for dispatch . To set a dispatch rolling window model you need to set the object solve parameters: solve_mode : rolling_window rolling_jump : Hours, the desired length of the solve interval rolling_horizon : Hours, the desired length of each roll solve rolling_duration : (Optional) Hours, the length of the combined outputs. If not set, the whole timeline is used. rolling_start : (Optional) Hours, the starting timestep the whole solve, if not wanting to start from the beginning realized_periods : Array of periods that are realized The other model parameters apply to all of the solves. Therefore, the considerations of the storage value binding that were discussed in the How to use a rolling window for a dispatch model should be taken into account here as well. Storage levels can be fixed with storage_solve_horizon_method : use_reference_value or use_reference_price , these will fix the end of each horizon not each jump. storage_start_end_method fixes the starts and/or ends of each solve level, meaning the first step of the first roll and the last step of the last roll. In most cases the bind_storage_method should be left as bind_forward_only Do not use bind_within_timeblock if you are not using full timeblock or its multiples as the rolling_jump in the dispatch model, otherwise you might cause an infeasible problem. Do not use bind_within_period if you are not using full periods or its multiples as the rolling_jump in the dispatch model, otherwise you might cause an infeasible problem. Do not use bind_within_solve How to create the three lower information solve types for investment and storage solves discussed above? To create a lower resolution (longer timesteps) solve: Make a new timeblockSet , but use the same timeline and block_duration for it as with the high resolution solve Set timeblockSet parameter new_stepduration : Hours In the solve use this new timeblockSet in the period_timeblockSet The model will create a new timeline for this solve with the new_stepduration . All the timestep map data like inflow or profile will be either summed or averaged for the new timeline. Again, the new_stepduration should be multiple of the old step duration. If the block_duration is not a multiple of the new_stepduration the last timestep will be shorter than the rest. To create a sample solve with representative periods: The tutorial contains an example of representaive periods under alternative 5weeks where the year is represented with five sample weeks. It is done with the timeblockSet parameter block_duration where instead of choosing the whole timeline by setting the first timestep and the duration of whole timeline, you choose multiple starting points with smaller durations. The example for the 5weeks is below. To create an investment solve sequence, you have two options: Create manually a series of solves and set the invest_periods and realized_invest_periods individually for the solves. How to create a multi-year model has an example of this with the difference that here you use realized_invest_periods instead of realized_periods and that each of the higher level solves requires the contains_solve parameter. If you have many splits, this option can get tedious and prone to mistakes. The other option is to use only one investment solve object: The invest_periods and realized_invest_periods should then be set with a 2D map where the first column tells the solve (you don't have to create separate solve objects for these) and the second column tells the period. To get a 2D map, choose the parameter type as Map and then right click the table and choose Insert column after/before . The value column does not matter. The model will generate these solves, with the periods given. Note that the solve names should match in both 2D-maps. You can use the same lower level solve with each the investment solves as the lower level solves will exclude the periods that are not included in either of the upper level realized periods: realized_invest_periods or fix_storage_periods . So, the lower level solve should have all the periods that it is used for in any the solves. Note that the results of a nested rolling solve run are not fully optimal, because the information in the model is decreased. This is the price you pay for the speed. Therefore, the results should not be taken as they are, instead it is important to know how to interpret the results: What phenomena are missing? How will they affect the results? Where should extra investments go to satisfy the demand (there is a possibility to use the capacity_margin method to force extra investments)? In the init.sqlite there are four example scenarios related to this: multi_fullYear_battery : The four period full year single solve, with coal, wind, battery storage with unlimited investment possibilities. Running this is still possible but takes a few minutes. This is here as a reference for the nested solves. multi_fullYear_battery_nested_24h_invest_one_solve : This has the nested structure and the investment solve is done with 24h timesteps and storage solve 6h timesteps. multi_fullYear_battery_nested_sample_invest_one_solve : This has the investment solve as 5weeks sample but all the four periods are included in the same investment solve. Nested structure with 6h storage solve timesteps. multi_fullYear_battery_nested_multi_invest : This has split the investment to four solves with each having two period 5weeks sample period horizon. Nested structure with 6h storage solve timesteps. The 24h timestep is clearly too long as it invests too little for storage and coal. A large upward penalty ensues. The sample one solve invest also invests too little, as the largest demand-supply ratio weeks are not in the five week sample. However, the investments are spread more accurately. The split sample investment run produces in this case similar results as the one solve sample run. This is not always the case! Here the only difference between the periods was linearly increased demand.","title":"How to use Nested Rolling window solves (investments and long-term storage)"},{"location":"how_to/#how-to-use-cplex-as-the-solver","text":"Using CPLEX requires that you have installed the software, have a licence for it and have added it to PATH or to the environment where you are using the FlexTool, so that the tool can find the solver. CPLEX is used when the solve parameter solver is set to 'cplex'. The tool passes the built optimization model to the CPLEX solver and converts the solution file to a filetype suitable for CPLEX. The solver will produce two additional files to the work directory: 'cplex.log' and 'flexModel3_cplex.sol'. The former is the logfile of the solver and the latter contains the solution in the CPLEX format. The tool uses Interactive Optimizer to pass the problem to the solver. The default command used: cplex -c 'read flexModel3.mps' 'opt' 'write flexModel3_cplex.sol' 'quit' Additional parameters: solver_precommand creates a text in front of the cplex call. This is useful when dealing with floating licences. The command allows to call the licence server to reserve the licence for the duration of the cplex program with a command line argument. solver_arguments is an array containing additional CPLEX solver commands With these parameters, the command line call is: 'solver_precommand' cplex -c 'read flexModel3.mps' 'solver_command1' 'solver_command2' ... 'solver_command_last' 'opt' 'write flexModel3_cplex.sol' 'quit'","title":"How to use CPLEX as the solver"},{"location":"how_to/#how-to-enabledisable-outputs","text":"Some outputs need to be explicitly added in order to output them. This is to reduce the result processing time. Each optional output can be added to the enable_optional_outputs parameter array of the model object. The additional outputs are: ramp_envelope : Includes seven parameters that form the ramp room envelope (how much there is additional ramping capability in a given node). node_balance_t : Produces detailed inflows and outflows for all the nodes for all timesteps. Mainly useful to diagnose what is wrong with the model. connection_flow_separate : Produces the connection flows separately for both directions. Similarly, some outputs can be disables to reduce the result processing time. To do so, add the output name to the disable_optional_outputs parameter array of the model object. The allowed outputs to disable are: unit_flow_t : The flows from units to the nodes for each timestep. connection_flow_t : The flows between the nodes for each timestep. These can be replaced by group outputs (e.g. all wind power plant outputs are aggregated into one).","title":"How to enable/disable outputs"},{"location":"how_to/#how-to-make-the-flextool-run-faster","text":"The list below contains potential ways to decrease the run-time of FlexTool models. External changes (results will remain the same): Keep both the input database and Flextool on the same drive. If the database is on a different drive, it can slow the process. Avoid network drives. Try to ensure that there is sufficient memory available by closing other programs that use lot of memory. Linear optimization problems can require lot of memory. Use as fast computer as available. Both faster processors and more processors can decrease computation time. Model changes (results will remain the same): Disable outputs that you don't need. This will speed up the result processing. See: How to enable/disable outputs Especially with MIP problems, considering using a commercial solver like CPLEX (license required). See: How to use CPLEX as the solver Model changes (results will be affected): Get rid of integer variables. Mixed integer programming can increase the solving time manyfold compared to the linear version especially if commercial solver is not available. MIP parameters are: transfer_method : exact , change to reqular startup_method : binary , change to linear Model changes (potentially large changes to the results --> need to understand how the particular analysis will be affected): Use representative periods for investment decisions. See: How to create a multi-year model Split the timeline into parts. The solving time increases exponentially with the model size. Multiple smaller solves can be faster. Splitting is best done with Rolling window solve and Nested rolling solve. See: How to use a rolling window for a dispatch model , How to use Nested Rolling window solves (investments and long-term storage) Aggregate data. Technological: Combine power plants that are using the same technology. Spatial: Combine nodes. Temporal: Use longer timesteps.","title":"How to make the Flextool run faster"},{"location":"install_toolbox/","text":"Installing Spine Toolbox and IRENA FlexTool on a local computer Follow video tutorial for installation here: Link to YouTube . Install Miniconda (or Anaconda) [Can be ignored if already installed] Start Anaconda prompt Create new Python environment [Also possible to use existing, up-to-date, Spine Toolbox environment] conda create -n flextool python=3.8 Activate the environment conda activate flextool Install Git to the environment [Also possible to use existing Git installation] conda install git cd to a directory into which both FlexTool and Spine Toolbox will make their own folders Clone the FlexTool Git repository git clone https://github.com/irena-flextool/flextool Install Spine Toolbox [Can be skipped if using existing Toolbox environment] Clone the Toolbox repository git clone https://github.com/Spine-project/Spine-Toolbox.git cd to the freshly created folder cd Spine-Toolbox Make sure Pip is up-to-date python -m pip install --upgrade pip Install packages required by Toolbox python -m pip install -r requirements.txt In case of problems when installing Spine Toolbox, more instructions are available at: https://github.com/Spine-project/Spine-Toolbox#installation Generate databases from templates: cd back to the flextool repository folder. Most likely: cd ../flextool Run update_flextool.py script. This will generate the Input_data.sqlite and Results.sqlite from their templates. These are not directly in the repository to avoid future overwrites. Update_flextool.py can also be used later when one wants to update the tool. python update_flextool.py Starting IRENA FlexTool in Spine Toolbox Open a conda prompt. Activate the environment conda activate flextool Launch Spine Toolbox python -m spinetoolbox Open FlexTool3 project in Spine Toolbox (Choose the flextool folder from File > Open project dialog) Updating IRENA FlexTool Updates for version 3.1.4 or later: Start anaconda/miniconda prompt conda activate flextool (or whatever is your conda environment name for IRENA FlexTool) If using Spine Toolbox, start by updating Spine Toolbox: cd to the repository folder Spine-Toolbox, where you cloned it. For example cd C:\\Users\\YourUser\\Documents\\Spine-Toolbox git pull python -m pip install -U -r requirements.txt cd back to FlexTool directory, where you cloned it. For example cd C:\\Users\\YourUser\\Documents\\flextool Update IRENA FlexTool: cd to the FlexTool directory python update_flextool.py This will pull the new version of the tool as well as migrating the input databases to the new version without destroying the data. Making a backup copy of the input data is still a good practice. The updated databases are: The database chosen as the input data in the tool!!! init.sqlite input_data_template.sqlite how to example databases If the git complains about merge conflicts, it is probably due to you modifying the template files. Use git restore . and git pull . This will restore ALL the files downloaded from the repository to their original states. Then repeat python update_flextool.py One can also migrate other input databases to the new version by calling: python migrate_database.py *absolute_path_to_database* or python migrate_database.py database_name.sqlite if in the main flextool folder Old version (release 3.1.3 or earlier): Update of IRENA FlexTool to the latest version is done as follows: Start anaconda prompt conda activate flextool (or whatever is your conda environment name for IRENA FlexTool) cd to the FlexTool directory git restore . (THIS WILL DELETE YOUR LOCAL CHANGES TO THE FILES IN THE WORKFLOW. This will be improved in the future. Currently you can work around this by making your own input files (Excel or SQLite) and pointing the workflow items (Excel_input_data or Input_Data) to your own files instead of the input_data.sqlite or FlexTool_import_template.xlsx.) git pull Then do the update_flextool discribed above to migrate the databases: python update_flextool.py","title":"Installing IRENA FlexTool - SpineToolbox"},{"location":"install_toolbox/#installing-spine-toolbox-and-irena-flextool-on-a-local-computer","text":"Follow video tutorial for installation here: Link to YouTube . Install Miniconda (or Anaconda) [Can be ignored if already installed] Start Anaconda prompt Create new Python environment [Also possible to use existing, up-to-date, Spine Toolbox environment] conda create -n flextool python=3.8 Activate the environment conda activate flextool Install Git to the environment [Also possible to use existing Git installation] conda install git cd to a directory into which both FlexTool and Spine Toolbox will make their own folders Clone the FlexTool Git repository git clone https://github.com/irena-flextool/flextool Install Spine Toolbox [Can be skipped if using existing Toolbox environment] Clone the Toolbox repository git clone https://github.com/Spine-project/Spine-Toolbox.git cd to the freshly created folder cd Spine-Toolbox Make sure Pip is up-to-date python -m pip install --upgrade pip Install packages required by Toolbox python -m pip install -r requirements.txt In case of problems when installing Spine Toolbox, more instructions are available at: https://github.com/Spine-project/Spine-Toolbox#installation Generate databases from templates: cd back to the flextool repository folder. Most likely: cd ../flextool Run update_flextool.py script. This will generate the Input_data.sqlite and Results.sqlite from their templates. These are not directly in the repository to avoid future overwrites. Update_flextool.py can also be used later when one wants to update the tool. python update_flextool.py","title":"Installing Spine Toolbox and IRENA FlexTool on a local computer"},{"location":"install_toolbox/#starting-irena-flextool-in-spine-toolbox","text":"Open a conda prompt. Activate the environment conda activate flextool Launch Spine Toolbox python -m spinetoolbox Open FlexTool3 project in Spine Toolbox (Choose the flextool folder from File > Open project dialog)","title":"Starting IRENA FlexTool in Spine Toolbox"},{"location":"install_toolbox/#updating-irena-flextool","text":"","title":"Updating IRENA FlexTool"},{"location":"install_toolbox/#updates-for-version-314-or-later","text":"Start anaconda/miniconda prompt conda activate flextool (or whatever is your conda environment name for IRENA FlexTool) If using Spine Toolbox, start by updating Spine Toolbox: cd to the repository folder Spine-Toolbox, where you cloned it. For example cd C:\\Users\\YourUser\\Documents\\Spine-Toolbox git pull python -m pip install -U -r requirements.txt cd back to FlexTool directory, where you cloned it. For example cd C:\\Users\\YourUser\\Documents\\flextool Update IRENA FlexTool: cd to the FlexTool directory python update_flextool.py This will pull the new version of the tool as well as migrating the input databases to the new version without destroying the data. Making a backup copy of the input data is still a good practice. The updated databases are: The database chosen as the input data in the tool!!! init.sqlite input_data_template.sqlite how to example databases If the git complains about merge conflicts, it is probably due to you modifying the template files. Use git restore . and git pull . This will restore ALL the files downloaded from the repository to their original states. Then repeat python update_flextool.py One can also migrate other input databases to the new version by calling: python migrate_database.py *absolute_path_to_database* or python migrate_database.py database_name.sqlite if in the main flextool folder","title":"Updates for version 3.1.4 or later:"},{"location":"install_toolbox/#old-version-release-313-or-earlier","text":"Update of IRENA FlexTool to the latest version is done as follows: Start anaconda prompt conda activate flextool (or whatever is your conda environment name for IRENA FlexTool) cd to the FlexTool directory git restore . (THIS WILL DELETE YOUR LOCAL CHANGES TO THE FILES IN THE WORKFLOW. This will be improved in the future. Currently you can work around this by making your own input files (Excel or SQLite) and pointing the workflow items (Excel_input_data or Input_Data) to your own files instead of the input_data.sqlite or FlexTool_import_template.xlsx.) git pull Then do the update_flextool discribed above to migrate the databases: python update_flextool.py","title":"Old version (release 3.1.3 or earlier):"},{"location":"install_web_interface/","text":"Installing IRENA FlexTool with a web server Installation instructions are in the FlexTool web server repository: here . The browser interface is shown here .","title":"Installing IRENA FlexTool - Web interface"},{"location":"install_web_interface/#installing-irena-flextool-with-a-web-server","text":"Installation instructions are in the FlexTool web server repository: here . The browser interface is shown here .","title":"Installing IRENA FlexTool with a web server"},{"location":"interface_overview/","text":"Main alternatives to use IRENA FlexTool Use a browser : IRENA FlexTool can be accessed with a web browser if you have an account for an IRENA FlexTool server. However, no public servers are available at the moment. The browser interface is introduced here . Local server: It is possible to setup a local server and then use a browser to access that server. See https://github.com/irena-flextool/flextool-web-interface Install a front-end : Install Spine Toolbox and run IRENA FlexTool as a Spine Toolbox project. This gives you the graphical user interface of Spine Toolbox. https://github.com/Spine-project/Spine-Toolbox. The interface and instructions to it are shown Toolbox interface","title":"Overview of the interfaces to Flextool"},{"location":"interface_overview/#main-alternatives-to-use-irena-flextool","text":"Use a browser : IRENA FlexTool can be accessed with a web browser if you have an account for an IRENA FlexTool server. However, no public servers are available at the moment. The browser interface is introduced here . Local server: It is possible to setup a local server and then use a browser to access that server. See https://github.com/irena-flextool/flextool-web-interface Install a front-end : Install Spine Toolbox and run IRENA FlexTool as a Spine Toolbox project. This gives you the graphical user interface of Spine Toolbox. https://github.com/Spine-project/Spine-Toolbox. The interface and instructions to it are shown Toolbox interface","title":"Main alternatives to use IRENA FlexTool"},{"location":"reference/","text":"Main entities to define a power/energy system Elemental entities (one dimensional): node : maintain a balance between generation, consumption, transfers and storage state changes (nodes can also represent storages) unit : power plants or other conversion devices that take one or more inputs and turn them into one or more outputs connection : transmission lines or other transfer connections between nodes commodity : fuels or other commodities that are either purchased or sold at a price outside of the model scope profile : timeseries that can be used to constraint the behaviour of units, connections or storages reserve : reserve categories to withhold capacity to cope with issues outside of model scope Entities with two or more dimensions: unit__inputNode and unit__outputNode : defines the inputs, outputs and their properties for the conversion units connection__node__node : defines which nodes a connection will connect unit__node__profile and connection__profile : defines a profile limit (upper, lower or fixed) for an energy flow node__profile : defines a profile limit (upper, lower, or fixed) for the storage state of the node commodity__node : defines if a node is a source or sink for a commodity reserve__upDown__unit__node and reserve__upDown__connection__node : reserve capacity from a source to the target node See below for more detailed explanations. How to define the temporal properties of the model Timesteps and periods FlexTool has two different kinds of time varying parameters. The first one represents a regular timeline based on timesteps. The duration of each timestep can be defined by the user. There can be multiple timelines in the database - the user needs to define which timeline to use (and what parts of the timeline should be used, as will be explained later). The timestep names in the timeline are defined by the user - they can be abstract like 't0001' or follow a datetime format of choice. However, the timestep names between different timelines must remain unique (usually there should be only one timeline in a database and therefore no issues). The second time varying dimension is period , which is typically used to depict assumptions about the future. One model can include multiple solves that the model will solve in sequence (to allow multi-stage modelling). Each solve can include multiple periods (so that the user can change parameter values for different parts of the future). A parameter of particular type can be either constant/time-varying or constant/period-based. For example inflow is either a constant or time-varying, but it cannot be period-based. Timeblocksets Timeblocks pick one or more sections from the timeline to form a timeblockset . Each timeblock defines a start and a duration. The aim of timeblocksets is to allow the modeller to create models with representative periods often used in the investment planning. Definitions model : model defines the sequence of solves to be performed (e.g. first an investment solve and then a dispatch solve) solves : sequence of solves in the model represented with an array of solve names. discount_offset_investment : [years] Offset from the period (often year) start to the first payment of the investment cost annuity. discount_offset_operations : [years] Offset from the period (often year) start to the payment of operational costs. enable_optional_outputs : [Array], Produces additional outputs. Allowed outputs: \"ramp_envelope\",\"node_balance_t\",\"connection_flow_separate\" disable_optional_outputs : [Array], Disable some of the default outputs to reduce the time used. Allowed outputs to be disabled: \"unit__node_flow_t\",\"connection__node__node_flow_t\" solve : each solve is built from an array of periods (e.g. one period for 2025 and another for 2030). Periods use timeblocksets to connect with a timeline. period_timeblockset : map of periods with associated timeblocks that will be included in the solve. Index: period name, value: timeblockSet name. realized_periods : these are the periods the model will 'realize' - i.e., what periods will be reported in the results from this solve realized_invest_periods Array of the periods that will realize the investment decisions. If this is not defined when the invest_periods exist, the realized_periods are used to realize the invests as well invest_periods : array of periods where investements are allowed in this solve (applies only to objects that can be invested in) years_represented : Map to indicate how many years the period represents before the next period in the solve. Used for discounting. Can be below one (multiple periods in one year). Index: period, value: years. solver : choice of a solver ('highs'(default), 'glpsol', 'cplex' (requires a licence)) highs_method : HiGHS solver method ('simplex' or 'ipm' which is interior point method). Should use 'choose' for MIP models, since 'simplex' and 'ipm' will not work. highs_parallel : HiGHS parallelises single solves or not ('on' or 'off'). It can be better to turn HiGHS parallel off when executing multiple scnearios in parallel. highs_presolve : HiGHS uses presolve ('on') or not ('off'). Can have a large impact on solution time when solves are large. solve_mode : a single solve or a set of rolling optimisation windows solved in a sequence Rolling window parameters: rolling_start_time : (Optional) Timestamp from the timeline that is linked to the timeblockSet used. Starting point of the rolling. If this is not stated, it is assumed to be the first timestep rolling_solve_jump : Hours, (Required if rolling_window solve). Interval between the start points of the rolls. Also the output interval. This should be smaller than the horizon rolling_solve_horizon : Hours, (Required if rolling_window solve). The length of the horizon of the roll. How long into the future the roll sees. For an individual roll, horizon is the solve length and jump is the output length. rolling_duration : Hours, (Optional). Duration of rolling, if not stated, assumed to be the whole timeline of the solve Nested solve sequence parameters: contains_solve : Array of solves that are run with after this solve using the realized data of this solve. Read 'How to use Nested Rolling window solves (investments and long term storage)' fix_storage_periods : Array of periods where the last storage value of the long term storage node is passed to the contained solve as a target. (Defined using the node parameter storage_nested_fix_method ) For commercial solvers: solver_precommand the commandline text in front of the call for the commercial (CPLEX) solver. For a possibility of reserving a floating licence for the duration of the solve solver_arguments Array of additional commands passed to the commercial solver. Made for setting optimization parameters. timeblockset : timeblocksets are sets of timeblocks with a start (from timeline) and a duration (number of time steps) block_duration a map with index timestep_name that starts the timeblock and value that defines the duration of the block (how many timesteps) new_stepduration : Hours. Creates a new timeline from the old for this timeblockSet with this timestep duration. The new timeline will sum or average the other timeseries data like profile and inflow for the new timesteps. timeline : continuous timeline with a user-defined duration for each timestep. Timelines are used by time series data. timestep_duration : a map with timestep_name as an index and duration as a value. timeline_duration_in_years Total duration of the timeline in years. Used to relate operational part of the model with the annualized part of the model. timeblockset__timeline : defines which timeline object particular timeblockset is using. Nodes Defining how the node functions These parameters will define how the node will behave and use the data it is given (available choices are marked in italics ): name - unique name identifier (case sensitive) is_active - is the model/node/unit active in a specific scenario: yes (if not defined, then not active) has_balance - does the node maintain a balance for inputs and outputs: yes (if not defined, then balance is not maintained) has_storage - does the node represent a storage and therefore have a state: yes (if not defined, then no storage) invest_method - Choice of investment method: either not_allowed or then a combination of invest and/or retire investment limits for each period and/or for all periods ( total ) or no_limit inflow_method - choice how to treat inflow time series use_original - does not scale the original time series (no value defaults here) no_inflow - ignores any inserted inflow time series scale_to_annual_flow - will scale the time series to match the annual_flow so that the sum of inflow is multiplied by 8760/ hours_in_solve scale_in_proprotion - calculates a scaling factor by dividing annual_flow with the sum of time series inflow (after it has been annualized using timeline_duration_in_years ) scale_to_annual_and_peak_flow - scales the time series to match the 'annual_flow' target while transforming the time series to match the highest load with the 'peak_inflow' Data for nodes Input data is set with the following parameters: inflow - [MWh] Inflow into the node (negative is outflow). Constant or time series. annual_flow - [MWh] Annual flow in energy units (always positive, the sign of inflow defines in/out). Constant or period. existing - [MWh] Existing storage capacity (requires has_storage ). Constant. invest_cost - [CUR/kWh] Investment cost for new storage capacity. Constant or period. salvage_value - [CUR/kWh] Salvage value of the storage. Constant or period. lifetime - [years] Life time of the storage unit represented by the node. Constant or period. interest_rate - [unitless, e.g. 0.05 means 5%] Interest rate for investments. Constant or period. invest_max_total - [MWh] Maximum storage investment over all solves. Constant. invest_max_period - [MWh] Maximum storage investment for each period. Period. invest_min_total - [MWh] Minimum storage investment over all solves. Constant. invest_min_period - [MWh] Minimum storage investment for each period. Period. invest_forced - [MWh] Storage capacity that must be invested in a given period. Investment cost will be included in the cost results even though the model does not have an investment variable. Constant or period. fixed_cost - [CUR/kWh] Annual fixed cost for storage. Constant or period. penalty_up - [CUR/MWh] Penalty cost for decreasing consumption in the node with a slack variable. Constant or time. penalty_down - [CUR/MWh] Penalty cost for increasing consumption in the node with a slack variable. Constant or time. virtual_unitsize - [MWh] Size of a single storage unit - used for integer investments (lumped investments). If not given, assumed from the existing storage capacity. self_discharge_loss - [e.g. 0.01 means 1% every hour] Loss of stored energy over time. Constant or time. availablity - [e.g. 0.9 means 90%] Fraction of capacity available for storage. Constant or time. Using nodes as storages FlexTool manages storages through nodes. A regular node maintains an energy/material balance between all inputs and outputs ( has_balance set to yes ). A storage node includes an additional state variable, which means that the node can also use charging and discharging of the storage while maintaining the energy balance. A storage node is created by setting has_storage to yes and by adding storage capacity using the existing parameter and/or by letting the model invest in storage capacity ( invest_method , invest_cost , invest_max_period , invest_max_total and invest_forced parameters). Since FlexTool allows different temporal structures (multi-periods, rolling optimization, etc.) there needs to be ways to define how the storages behave when the model timeline is not fully consequtive. By default, storages are forced to match start level to the end level within timeblocks. This is an acceptable setting for small storages that do not carry meaningful amounts of energy between longer time periods in the model. There are three methods associated with storage start and end values: storage_binding_method , storage_start_end_method and storage_solve_horizon_method . The most simple one of these is the storage_start_end_method and it overrides the other methods, since it forces the start and/or the end state of the storage to a predefined value based on the proportional parameters storage_state_start and storage_state_end (proportional means that the parameter needs to be set between 0-1 and will be scaled by the storage capacity in the model). These two parameters affect only the first and the last timesteps of the entire model (even when the model has more than one solve). storage_binding_method states how the storage should behave over discontinuities in the model timeline. Model timeline can have jumps for three different reasons: timeblocks, periods, and solves. If storage_binding_method is bind_within_timeblock , then the storage has to match the state of the storage between the beginning and the end of each timeblock. In effect, storage_state_at_start_of_timeblock equals storage_state_at_end_of_timeblock plus charging minus discharging minus self_discharge_loss at the last timestep. Similarly, bind_within_period will force the start and end between periods, but it will treat the jumps between timeblocks as continuous from the storage perspective (the storage will continue from where it was at the end of the previous timeblock). bind_within_solve does effectively the same when there are multiple periods within one solve. bind_within_model (NOT IMPLEMENTED 19.3.2023) will extend the continuity to multiple solves and force the end state of the storage at the end of the last solve to match the beginning state of the storage at the start of the first solve. Finally, bind_forward_only will force continuity in the storage state over the whole model without forcing the end state to match the beginning state. storage_solve_horizon_method is meant for models that roll forward between solves and have an overlapping temporal window between those solves (e.g. a model with 36 hour horizon rolls forward 24 hours at each solve - those 12 last hours will be overwritten by the next solve). In these cases, the end state of the storage will be replaced by the next solve, but it can be valuable to have some guidance for the end level of storage, since it will affect storage behaviour. There are three methods: free is the default and will simply let the model choose where the storage state ends (usually the storage will be emptied, since it would have no monetary value). use_reference_value will use the value set by storage_state_reference_value to force the end state in each solve to match the reference value. use_reference_price will give monetary value for the storage content at the end of the solve horizon set by the storage_state_reference_price parameter - the model is free to choose how much it stores at the end of horizon based on this monetary value. -Method hierarchy: storage_start_end_method storage_binding_method storage_solve_horizon_method -Meaning: The storage_binding_method is ignored (exeption bind_forward_only ), if storage_start_end_method has the value fix_start_end , The storage_solve_horizon_method use_reference_value is ignored, if other storage state methods are used. Only exeptions are fix_start or bind_forward_only -Nested Parameters: storage_nested_fix_method : Set this storage as a long term storage, which end state is passed to the lower level solves as a target. Fix_price requires storage_state_reference_price Units Units convert energy (or matter) from one form to another (e.g. open cycle gas turbine), but the can also have multiple inputs and/or outputs (e.g. combined heat and power plant). The input nodes are defined with the relationship unit--inputNode while the output nodes are defined through the relationship unit--outputNode . Defining how the unit functions is_active to state the alternative where the unit becomes active 'conversion_method' to define the way unit converts inputs to outputs startup_method - Choice of startup method. 'Linear' startup means that the unit can start partially (anything between 0 and full capacity) but will face startup cost as well as minimum load limit based on the capacity started up. 'Binary' startup means that the unit is either off or fully on, but it is computationally more demanding than linearized startups. minimum_time_method - Not functional yet. Choice between minimum up- and downtimes ( , min_downtime , min_uptime , both ). Main data items for units Capacity: existing (and the investment and retirement parameters below) Technical: efficiency , min_load , efficiency_at_min_load , min_uptime , min_downtime min_load - [0-1] Minimum load of the unit. Applies only if the unit has an online variable. With linear startups, it is the share of capacity started up. Constant or time. availability - [e.g. 0.9 means 90%] Fraction of capacity available for flows from/to the unit. For online units, the online variable is multiplied by the availability. Constant or time. Economic: startup_cost , fixed_cost (fuel cost comes through the use of fuel commodities and other variable costs are defined for flows between unit and node, see below) Investment parameters for capacity expansion invest_method - Choice of investment method: either not_allowed or then a combination of invest and/or retire investment limits for each period and/or for all periods ( total ) or no_limit lifetime_method to choose how the investments behave after unit runs out of lifetime. Automatic reinvestment (reinvest_automatic - default) causes the model to keep the capacity until the end of model horizon and applies the annualized investment cost until the end of model horizon without further choice by the model. Choice of reinvestment (reinvest_choice) removes the capacity at the end of the lifetime and the model needs to decide how much new capacity is to be built. If there is a need to remove the possibility to invest after lifetime, then the investment limits can be used. invest_cost - [CUR/kW] Investment cost for new capacity. Constant or period. salvage_value - [CUR/kW] Salvage value of the unit capacity. Constant or period. lifetime - [years] Lifetime of the unit. Constant or period. interest_rate - [unitless, e.g. 0.05 means 5%] Interest rate for investments. Constant or period. invest_max_total - [MW] Maximum capacity investment over all solves. Constant. invest_max_period - [MW] Maximum capacity investment for each period. Period. invest_min_total - [MW] Maximum capacity investment over all solves. Constant. invest_min_period - [MW] Maximum capacity investment for each period. Period. invest_forced - [MWh] Capacity that must be invested in a given period. Investment cost will be included in the cost results even though the model does not have an investment variable. Constant or period. retire_cost - [CUR/kW] Retirement cost for new capacity. Constant or period. retire_max_total - [MW] Maximum capacity retirement over all solves. Constant. retire_max_period - [MW] Maximum capacity retirement for each period. Period. retire_min_total - [MW] Minimum capacity retirement over all solves. Constant. retire_min_period - [MW] Minimum capacity retirement for each period. Period. retire_forced - [MW] Capacity that must be invested in a given period. Retirement cost will be included in the cost results even though the model does not have an retirement variable. Constant or period. fixed_cost - [CUR/kW] Annual fixed cost for capacity. Constant or period. virtual_unitsize - [MWh] Size of a single unit - used for integer investments (lumped investments). If not given, assumed from the existing capacity. Discount calculations Each asset that can be invested in should have invest_cost , lifetime and interest_rate parameters set and could have an optional fixed_cost . These are used to calculate the annuity of the investment. Annuity is used to annualize the investment cost, since FlexTool scales all costs (operational, investment and fixed) to annual level in order to make them comparable. Annuity is calculated as follows: invest_cost * interest_rate / { 1 - [ 1 / ( 1 + interest_rate ) ] ^ lifetime } + fixed_cost The next step is to consider discounting - future is valued less than the present. There is a model-wide assumption for the discount_rate . By default it is 0.05 (i.e. 5%), but it can be changed through the discount_rate parameter set for the flexTool model object. Discount factor for every period in the model is calculated from the discount_rate using the years_represented parameter of each solve , which how many years the period represents. Values for years_represented are used to calculate how many years_from_solve_start each year is. The formula is: [ 1 / ( 1 + discount_rate ) ] ^ years_from_solve_start Operational costs are also discounted using the same discount_rate . However, with operational costs it is assumed that they take place on average at the middle of the year whereas investment costs are assumed to take place at the beginning of the year (they are available for the whole year). These can be tweaked with the discount_offset_investments and discount_offset_operations parameters (given in years). Please note that given this formulation, invest_cost should be the overnight built cost (as is typical in energy system modelling, the model does not assume any construction time - the financing costs of the construction period need to be included in your cost assumptions). The model has a model horizon based on the years_represented parameters. The model will not include discounted investment annuities after the model horizon (in other words, the investments are 'returned' at the end of the model horizon). Naturally also operational costs are included only until the end of the model horizon. Finally, the retirements work similar to investments using the same discount_rate and interest_rate parameters but with salvage_value as the benefit from retiring the unit. Relationship of a unit to a node and determination of the type of relationship If the unit\u2019s outputs are flowing into the node, the node acts as output for the unit. If the unit\u2019s inputs are flowing out of the node (into the unit), the node acts as input for the unit. Not all units necessary have both an input and an output node. E.g. VRE generators have only output nodes and their generation is driven by profiles Properties of unit--inputNode and unit--outputNode relationships is_non_synchronous - Chooses whether the unit is synchronously connected to this node. coefficient - [factor] Coefficient to scale the output from a unit to a particular node. Can be used e.g. to change unit of measurement or to remove the flow by using zero as the coefficient (the flow variable can still be used in user constraints). Constant. other_operational_cost - [CUR/MWh] Other operational variable costs for energy flows. Constant or time. inertia_constant - [MWs/MW] Inertia constant for a synchronously connected unit to this node. Constant. ramp_method - Choice of ramp method. 'ramp_limit' poses a limit on the speed of ramp. 'ramp_cost' poses a cost on ramping the flow (NOT FUNCTIONAL AS OF 19.3.2023). ramp_cost - [CUR/MW] Cost of ramping the unit. Constant. ramp_speed_up - [per unit / minute] Maximum ramp up speed. Constant. ramp_speed_down - [per unit / minute] Maximum ramp down speed. Constant. Units constrained by profiles Some generators (e.g. VRE) are not converting energy from one node to the other. Instead, their generation is determined (or limited) by a specific generation profile set by a profile object with a profile_method , thats state whether the profile forces an upper_limit , lower_limit or equal ity. Finally profile object is given a profile time series (or it can also be a constant). One needs to use node__profile , unit__node__profile or connection__profile to apply the profile to specific energy flow (or storage state in the case of node__profile ). Connections Connections can transfer energy between two nodes. Parameters for the connection are defined in the connection object, but the two nodes it connects are defined by establishing a relationship between connection--leftNode--rightNode . Defining how the connection functions is_active to state the alternative where the connection becomes active transfer_method to define the way the connection transfers energy between the nodes startup_method where linear startup means that the unit can start partially (anything between 0 and full capacity) but will face startup cost as well as minimum load limit based on the capacity started up. binary startup means that the unit is either off or fully on, but it is computationally more demanding than linearized startups. invest_method to define investment and retirement limits: either not_allowed or then a combination of invest and/or retire investment limits for each period and/or for all periods ( total ) or no_limit lifetime_method to choose how the investments behave after unit runs out of lifetime. Automatic reinvestment (reinvest_automatic - default) causes the model to keep the capacity until the end of model horizon and applies the annualized investment cost until the end of model horizon without further choice by the model. Choice of reinvestment (reinvest_choice) removes the capacity at the end of the lifetime and the model needs to decide how much new capacity is to be built. If there is a need to remove the possibility to invest after lifetime, then the investment limits can be used. Main data items for connections existing - [MW] Existing capacity. Constant. efficiency - [factor, typically between 0-1] Efficiency of a connection. Constant or time. constraint_capacity_coefficient - A map of coefficients (Index: constraint name, value: coefficient) to represent the participation of the connection capacity in user-defined constraints. [(invest - divest variable) x coefficient] will be added to the left side of the constraint equation. Invest and divest variables are not multiplied by unitsize. other_operational_cost - [CUR/MWh] Other operational variable cost for trasferring over the connection. Constant or time. fixed_cost - [CUR/kW] Annual fixed cost. Constant or period. invest_cost - [CUR/kW] Investment cost for new 'virtual' capacity. Constant or period. interest_rate - [e.g. 0.05 equals 5%] Interest rate for investments. Constant or period. lifetime - [years] Used to calculate annuity together with interest rate. Constant or period. other investment parameters: invest_max_total , invest_max_period , invest_min_total , invest_min_period , invest_forced , salvage_value is_DC - A flag whether the connection is DC (the flow will not be counted as synchronous if there is a non_synchronous_limit ). Default false. virtual_unitsize - [MW] Size of single connection - used for integer (lumped) investments. availability - [e.g. 0.9 means 90%] Fraction of capacity available for connection flows. Constant or time. Investment parameters for connections These are the same as for units, see here Commodities Some nodes can act as a source or a sink of commodities instead of forcing a balance between inputs and outputs. To make that happen, commodities must have a price and be connected to those nodes that serve (or buy) that particular commodity at the given price . In other words, commodity is separate from node so that the user can use the same commodity properties for multiple nodes. Commodities can also have a co2_content . The commodity and its nodes are connected by establishin a new relationship between the commodity and each of its nodes (e.g. coal--coal_market ). price - [CUR/MWh or other unit] Price of the commodity. Constant or period. co2_content - [CO2 ton per MWh] Constant. Groups Groups are used to make constraints that apply to a group of nodes, units and/or connections. A group is defined by creating a group object and then creating a relationship between the group and its members. The membership relationship classes are group__node , group__unit , group__connection , group__unit__node , group__connection__node and reserve__upDown__group . The choice of group members depends on what the group is trying to achieve. For instance a group that limits investments could have a set of units included in the group. Capacity limits for nodes, units and connections invest_method - the choice of method how to limit or force investments in capacity [MW or MWh] of the group members invest_max_total - [MW or MWh] Maximum investment to the virtual capacity of a group of units or to the storage capacity of a group of nodes. Total over all solves. invest_max_period - [MW or MWh] Maximum investment per period to the virtual capacity of a group of units or to the storage capacity of a group of nodes. invest_min_total - [MW or MWh] Minimum investment to the virtual capacity of a group of units or to the storage capacity of a group of nodes. Total over all solves. invest_min_period - [MW or MWh] Minimum investment per period to the virtual capacity of a group of units or to the storage capacity of a group of nodes. Cumulative and instant flow limits for unit__node s and connection__node s max_cumulative_flow - [MW] Limits the maximum cumulative flow for a group of connection_nodes and/or unit_nodes. It needs to be expressed as average flow, since the limit is multiplied by the model duration to get the cumulative limit (e.g. by 8760 if a single year is modelled). Applied for each solve. Constant or period. min_cumulative_flow - [MW] Limits the minimum cumulative flow for a group of connection_nodes and/or unit_nodes. It needs to be expressed as average flow, since the limit is multiplied by the model duration to get the cumulative limit (e.g. by 8760 if a single year is modelled). Applied for each solve. Constant or period. max_instant_flow - [MW] Maximum instantenous flow for the aggregated flow of all group members. Constant or period. min_instant_flow - [MW] Minimum instantenous flow for the aggregated flow of all group members. Constant or period. Limits for nodes has_inertia - A flag whether the group of nodes has an inertia constraint active. inertia_limit - [MWs] Minimum for synchronous inertia in the group of nodes. Constant or period. penalty_inertia - [CUR/MWs] Penalty for violating the inertia constraint. Constant or period. has_non_synchronous - A flag whether the group of nodes has the non-synchronous share constraint active. non_synchronous_limit - [share, e.g. 0.8 means 80%] The maximum share of non-synchronous generation in the node group. Constant or period. penalty_non_synchronous - [CUR/MWh] Penalty for violating the non synchronous constraint. Constant or period. has_capacity_margin - A flag whether the group of nodes has a capacity margin constraint in the investment mode. capacity_margin - [MW] How much capacity a node group is required to have in addition to the peak net load in the investment time series. Used only by the investment mode. Constant or period. penalty_capacity_margin - [CUR/MWh] Penalty for violating the capacity margin constraint. Constant or period. CO2 costs and limits co2_method - Choice of the CO2 method or a combination of methods: no_method, price, period, total, price_period, price_total, period_total, price_period_total. co2_price [CUR/ton] CO2 price for a group of nodes. Constant or period. co2_max_period [tCO2] Maximum limit for emitted CO2 in each period. co2_max_total [tCO2] Maximum limit for emitted CO2 in the whole solve. Controlling outputs Some results are output for groups of nodes. This means that instead of getting output for each node separately, nodes can be grouped and the aggregated results can be examined. For example it can be helpful to group all electricity nodes and show their aggregated output. output_results - A flag to output aggregated results for the group members. Some of the outputs are not created by default. This is done to speed up the post-processing of results. The user can enable them by changing parameters of the the model entity: enable_optional_outputs : [Array], Produces additional outputs. Allowed outputs: \"ramp_envelope\",\"node_balance_t\",\"connection_flow_separate\" ramp_envelope : Includes seven parameters that form the ramp room envelope (how much there is additional ramping capability in a given node). node_balance_t : Produces detailed inflows and outflows for all the nodes for all timesteps. Mainly useful to diagnose what is wrong with the model. connection_flow_separate : Produces the connection flows separately for both directions. Additionally some of the default outputs can be disabled if user needs more speed and the outputs are not used. disable_optional_outputs : [Array], Disable some of the default outputs to reduce the time used. Allowed outputs to be disabled: \"unit__node_flow_t\",\"connection__node__node_flow_t\" unit_flow_t : The flows from units to the nodes for each timestep. connection_flow_t : The flows between the nodes for each timestep. Reserves The user defines reserve categories through reserve object. Reserves are reservations of capacity (either upward or downward) and that capacity will not therefore be available for other use (flowing energy or commodities). There are three different ways how a reserve requirement can be calculated: timeseries, large_failure and dynamic. Timeseries requires that the user provides a pre-defined time series for the amount of reserve to be procured in each time step. Large_failure requires that the user defines the energy flows that could be the largest failure in the system. The highest possible failure (flow multiplied by large_failure_ratio ) in each timestep will then set the reserve requirement for that timestep. Dynamic means that there is a requirement based on user chosen energy flows - each participating flow is multipled by increase_reserve_ratio and then summed to form the reserve requirement. This can be useful for covering variability within timesteps. Also demand variability can be included through increase_reserve_ratio parameter in reserve__upDown__group relationship. When the same reserve category (e.g. primary upward) has more than one of these (timeseries, large_failure and dynamic) in use, then the largest requirement will apply for that timestep. If they are separated into different reserves, then they need to be fulfilled separately. Reserve requirement is defined for groups of nodes. This means that multiple nodes can have a common reserve requirement (but it is also possible to make a group with only one node). One node can be in multiple groups and therefore subject to multiple overlapping reserve requirements. Only units can generate reserve, but connections can move reserve from one node to another (therefore, there is no impact if the nodes are in the same reserve group, but it can be useful to import reserve from outside the group). Reserve groups For reserve__upDown__group relationships: reserve_method - Choice of reserve method (timeseries, large_failure, dynamic or their combination). reservation - [MWh] Amount of reserve required. Constant or time. reserve_penalty - [\u20ac/MWh] Penalty cost for not fulfilling the reserve requirement. increase_reserve_ratio - [factor] The reserve is increased by the sum of demands from the group members multiplied by this ratio. Constant. Reserve provision by units For reserve__upDown__unit__node relationships: is_active - Can the unit provide this reserve. Empty indicates not allowed. Use 'yes' to indicate true. max_share - [factor] Maximum ratio for the transfer of reserve from the unit to the node. Constant. reliability - [factor] The share of the reservation that is counted to reserves (sometimes reserve sources are not fully trusted). Constant. increase_reserve_ratio - [factor] The reserve requirement is increased by the flow between the unit and the node multiplied by this ratio. Constant. large_failure_ratio - [factor] Each unit using the N-1 failure method will have a separate constraint to require sufficient reserve to cover a failure of the unit generation (multiplied by this ratio). Constant. Reserve transfer by connections For reserve__upDown__connection__node relationships: is_active - Can the unit provide this reserve. Empty indicates not allowed. Use 'yes' to indicate true. max_share - [factor] Maximum ratio for the transfer of reserve to this node. Constant. reliability - [factor] The share of the reservation that is counted to reserves (sometimes reserve sources are not fully trusted). Constant. increase_reserve_ratio - [factor] The reserve is increased by generation from this unit multiplied this ratio. Constant. large_failure_ratio - [factor] Each connection using the N-1 failure method will have a separate constraint to require sufficient reserve to cover a failure of the connection (multiplied by this ratio). Constant. Additional objects for further functionality constraint : to create user defined constraints between flow, state, and capacity variables (for nodes, units and connections)","title":"Model parameters"},{"location":"reference/#main-entities-to-define-a-powerenergy-system","text":"Elemental entities (one dimensional): node : maintain a balance between generation, consumption, transfers and storage state changes (nodes can also represent storages) unit : power plants or other conversion devices that take one or more inputs and turn them into one or more outputs connection : transmission lines or other transfer connections between nodes commodity : fuels or other commodities that are either purchased or sold at a price outside of the model scope profile : timeseries that can be used to constraint the behaviour of units, connections or storages reserve : reserve categories to withhold capacity to cope with issues outside of model scope Entities with two or more dimensions: unit__inputNode and unit__outputNode : defines the inputs, outputs and their properties for the conversion units connection__node__node : defines which nodes a connection will connect unit__node__profile and connection__profile : defines a profile limit (upper, lower or fixed) for an energy flow node__profile : defines a profile limit (upper, lower, or fixed) for the storage state of the node commodity__node : defines if a node is a source or sink for a commodity reserve__upDown__unit__node and reserve__upDown__connection__node : reserve capacity from a source to the target node See below for more detailed explanations.","title":"Main entities to define a power/energy system"},{"location":"reference/#how-to-define-the-temporal-properties-of-the-model","text":"","title":"How to define the temporal properties of the model"},{"location":"reference/#timesteps-and-periods","text":"FlexTool has two different kinds of time varying parameters. The first one represents a regular timeline based on timesteps. The duration of each timestep can be defined by the user. There can be multiple timelines in the database - the user needs to define which timeline to use (and what parts of the timeline should be used, as will be explained later). The timestep names in the timeline are defined by the user - they can be abstract like 't0001' or follow a datetime format of choice. However, the timestep names between different timelines must remain unique (usually there should be only one timeline in a database and therefore no issues). The second time varying dimension is period , which is typically used to depict assumptions about the future. One model can include multiple solves that the model will solve in sequence (to allow multi-stage modelling). Each solve can include multiple periods (so that the user can change parameter values for different parts of the future). A parameter of particular type can be either constant/time-varying or constant/period-based. For example inflow is either a constant or time-varying, but it cannot be period-based.","title":"Timesteps and periods"},{"location":"reference/#timeblocksets","text":"Timeblocks pick one or more sections from the timeline to form a timeblockset . Each timeblock defines a start and a duration. The aim of timeblocksets is to allow the modeller to create models with representative periods often used in the investment planning.","title":"Timeblocksets"},{"location":"reference/#definitions","text":"model : model defines the sequence of solves to be performed (e.g. first an investment solve and then a dispatch solve) solves : sequence of solves in the model represented with an array of solve names. discount_offset_investment : [years] Offset from the period (often year) start to the first payment of the investment cost annuity. discount_offset_operations : [years] Offset from the period (often year) start to the payment of operational costs. enable_optional_outputs : [Array], Produces additional outputs. Allowed outputs: \"ramp_envelope\",\"node_balance_t\",\"connection_flow_separate\" disable_optional_outputs : [Array], Disable some of the default outputs to reduce the time used. Allowed outputs to be disabled: \"unit__node_flow_t\",\"connection__node__node_flow_t\" solve : each solve is built from an array of periods (e.g. one period for 2025 and another for 2030). Periods use timeblocksets to connect with a timeline. period_timeblockset : map of periods with associated timeblocks that will be included in the solve. Index: period name, value: timeblockSet name. realized_periods : these are the periods the model will 'realize' - i.e., what periods will be reported in the results from this solve realized_invest_periods Array of the periods that will realize the investment decisions. If this is not defined when the invest_periods exist, the realized_periods are used to realize the invests as well invest_periods : array of periods where investements are allowed in this solve (applies only to objects that can be invested in) years_represented : Map to indicate how many years the period represents before the next period in the solve. Used for discounting. Can be below one (multiple periods in one year). Index: period, value: years. solver : choice of a solver ('highs'(default), 'glpsol', 'cplex' (requires a licence)) highs_method : HiGHS solver method ('simplex' or 'ipm' which is interior point method). Should use 'choose' for MIP models, since 'simplex' and 'ipm' will not work. highs_parallel : HiGHS parallelises single solves or not ('on' or 'off'). It can be better to turn HiGHS parallel off when executing multiple scnearios in parallel. highs_presolve : HiGHS uses presolve ('on') or not ('off'). Can have a large impact on solution time when solves are large. solve_mode : a single solve or a set of rolling optimisation windows solved in a sequence Rolling window parameters: rolling_start_time : (Optional) Timestamp from the timeline that is linked to the timeblockSet used. Starting point of the rolling. If this is not stated, it is assumed to be the first timestep rolling_solve_jump : Hours, (Required if rolling_window solve). Interval between the start points of the rolls. Also the output interval. This should be smaller than the horizon rolling_solve_horizon : Hours, (Required if rolling_window solve). The length of the horizon of the roll. How long into the future the roll sees. For an individual roll, horizon is the solve length and jump is the output length. rolling_duration : Hours, (Optional). Duration of rolling, if not stated, assumed to be the whole timeline of the solve Nested solve sequence parameters: contains_solve : Array of solves that are run with after this solve using the realized data of this solve. Read 'How to use Nested Rolling window solves (investments and long term storage)' fix_storage_periods : Array of periods where the last storage value of the long term storage node is passed to the contained solve as a target. (Defined using the node parameter storage_nested_fix_method ) For commercial solvers: solver_precommand the commandline text in front of the call for the commercial (CPLEX) solver. For a possibility of reserving a floating licence for the duration of the solve solver_arguments Array of additional commands passed to the commercial solver. Made for setting optimization parameters. timeblockset : timeblocksets are sets of timeblocks with a start (from timeline) and a duration (number of time steps) block_duration a map with index timestep_name that starts the timeblock and value that defines the duration of the block (how many timesteps) new_stepduration : Hours. Creates a new timeline from the old for this timeblockSet with this timestep duration. The new timeline will sum or average the other timeseries data like profile and inflow for the new timesteps. timeline : continuous timeline with a user-defined duration for each timestep. Timelines are used by time series data. timestep_duration : a map with timestep_name as an index and duration as a value. timeline_duration_in_years Total duration of the timeline in years. Used to relate operational part of the model with the annualized part of the model. timeblockset__timeline : defines which timeline object particular timeblockset is using.","title":"Definitions"},{"location":"reference/#nodes","text":"","title":"Nodes"},{"location":"reference/#defining-how-the-node-functions","text":"These parameters will define how the node will behave and use the data it is given (available choices are marked in italics ): name - unique name identifier (case sensitive) is_active - is the model/node/unit active in a specific scenario: yes (if not defined, then not active) has_balance - does the node maintain a balance for inputs and outputs: yes (if not defined, then balance is not maintained) has_storage - does the node represent a storage and therefore have a state: yes (if not defined, then no storage) invest_method - Choice of investment method: either not_allowed or then a combination of invest and/or retire investment limits for each period and/or for all periods ( total ) or no_limit inflow_method - choice how to treat inflow time series use_original - does not scale the original time series (no value defaults here) no_inflow - ignores any inserted inflow time series scale_to_annual_flow - will scale the time series to match the annual_flow so that the sum of inflow is multiplied by 8760/ hours_in_solve scale_in_proprotion - calculates a scaling factor by dividing annual_flow with the sum of time series inflow (after it has been annualized using timeline_duration_in_years ) scale_to_annual_and_peak_flow - scales the time series to match the 'annual_flow' target while transforming the time series to match the highest load with the 'peak_inflow'","title":"Defining how the node functions"},{"location":"reference/#data-for-nodes","text":"Input data is set with the following parameters: inflow - [MWh] Inflow into the node (negative is outflow). Constant or time series. annual_flow - [MWh] Annual flow in energy units (always positive, the sign of inflow defines in/out). Constant or period. existing - [MWh] Existing storage capacity (requires has_storage ). Constant. invest_cost - [CUR/kWh] Investment cost for new storage capacity. Constant or period. salvage_value - [CUR/kWh] Salvage value of the storage. Constant or period. lifetime - [years] Life time of the storage unit represented by the node. Constant or period. interest_rate - [unitless, e.g. 0.05 means 5%] Interest rate for investments. Constant or period. invest_max_total - [MWh] Maximum storage investment over all solves. Constant. invest_max_period - [MWh] Maximum storage investment for each period. Period. invest_min_total - [MWh] Minimum storage investment over all solves. Constant. invest_min_period - [MWh] Minimum storage investment for each period. Period. invest_forced - [MWh] Storage capacity that must be invested in a given period. Investment cost will be included in the cost results even though the model does not have an investment variable. Constant or period. fixed_cost - [CUR/kWh] Annual fixed cost for storage. Constant or period. penalty_up - [CUR/MWh] Penalty cost for decreasing consumption in the node with a slack variable. Constant or time. penalty_down - [CUR/MWh] Penalty cost for increasing consumption in the node with a slack variable. Constant or time. virtual_unitsize - [MWh] Size of a single storage unit - used for integer investments (lumped investments). If not given, assumed from the existing storage capacity. self_discharge_loss - [e.g. 0.01 means 1% every hour] Loss of stored energy over time. Constant or time. availablity - [e.g. 0.9 means 90%] Fraction of capacity available for storage. Constant or time.","title":"Data for nodes"},{"location":"reference/#using-nodes-as-storages","text":"FlexTool manages storages through nodes. A regular node maintains an energy/material balance between all inputs and outputs ( has_balance set to yes ). A storage node includes an additional state variable, which means that the node can also use charging and discharging of the storage while maintaining the energy balance. A storage node is created by setting has_storage to yes and by adding storage capacity using the existing parameter and/or by letting the model invest in storage capacity ( invest_method , invest_cost , invest_max_period , invest_max_total and invest_forced parameters). Since FlexTool allows different temporal structures (multi-periods, rolling optimization, etc.) there needs to be ways to define how the storages behave when the model timeline is not fully consequtive. By default, storages are forced to match start level to the end level within timeblocks. This is an acceptable setting for small storages that do not carry meaningful amounts of energy between longer time periods in the model. There are three methods associated with storage start and end values: storage_binding_method , storage_start_end_method and storage_solve_horizon_method . The most simple one of these is the storage_start_end_method and it overrides the other methods, since it forces the start and/or the end state of the storage to a predefined value based on the proportional parameters storage_state_start and storage_state_end (proportional means that the parameter needs to be set between 0-1 and will be scaled by the storage capacity in the model). These two parameters affect only the first and the last timesteps of the entire model (even when the model has more than one solve). storage_binding_method states how the storage should behave over discontinuities in the model timeline. Model timeline can have jumps for three different reasons: timeblocks, periods, and solves. If storage_binding_method is bind_within_timeblock , then the storage has to match the state of the storage between the beginning and the end of each timeblock. In effect, storage_state_at_start_of_timeblock equals storage_state_at_end_of_timeblock plus charging minus discharging minus self_discharge_loss at the last timestep. Similarly, bind_within_period will force the start and end between periods, but it will treat the jumps between timeblocks as continuous from the storage perspective (the storage will continue from where it was at the end of the previous timeblock). bind_within_solve does effectively the same when there are multiple periods within one solve. bind_within_model (NOT IMPLEMENTED 19.3.2023) will extend the continuity to multiple solves and force the end state of the storage at the end of the last solve to match the beginning state of the storage at the start of the first solve. Finally, bind_forward_only will force continuity in the storage state over the whole model without forcing the end state to match the beginning state. storage_solve_horizon_method is meant for models that roll forward between solves and have an overlapping temporal window between those solves (e.g. a model with 36 hour horizon rolls forward 24 hours at each solve - those 12 last hours will be overwritten by the next solve). In these cases, the end state of the storage will be replaced by the next solve, but it can be valuable to have some guidance for the end level of storage, since it will affect storage behaviour. There are three methods: free is the default and will simply let the model choose where the storage state ends (usually the storage will be emptied, since it would have no monetary value). use_reference_value will use the value set by storage_state_reference_value to force the end state in each solve to match the reference value. use_reference_price will give monetary value for the storage content at the end of the solve horizon set by the storage_state_reference_price parameter - the model is free to choose how much it stores at the end of horizon based on this monetary value. -Method hierarchy: storage_start_end_method storage_binding_method storage_solve_horizon_method -Meaning: The storage_binding_method is ignored (exeption bind_forward_only ), if storage_start_end_method has the value fix_start_end , The storage_solve_horizon_method use_reference_value is ignored, if other storage state methods are used. Only exeptions are fix_start or bind_forward_only -Nested Parameters: storage_nested_fix_method : Set this storage as a long term storage, which end state is passed to the lower level solves as a target. Fix_price requires storage_state_reference_price","title":"Using nodes as storages"},{"location":"reference/#units","text":"Units convert energy (or matter) from one form to another (e.g. open cycle gas turbine), but the can also have multiple inputs and/or outputs (e.g. combined heat and power plant). The input nodes are defined with the relationship unit--inputNode while the output nodes are defined through the relationship unit--outputNode .","title":"Units"},{"location":"reference/#defining-how-the-unit-functions","text":"is_active to state the alternative where the unit becomes active 'conversion_method' to define the way unit converts inputs to outputs startup_method - Choice of startup method. 'Linear' startup means that the unit can start partially (anything between 0 and full capacity) but will face startup cost as well as minimum load limit based on the capacity started up. 'Binary' startup means that the unit is either off or fully on, but it is computationally more demanding than linearized startups. minimum_time_method - Not functional yet. Choice between minimum up- and downtimes ( , min_downtime , min_uptime , both ).","title":"Defining how the unit functions"},{"location":"reference/#main-data-items-for-units","text":"Capacity: existing (and the investment and retirement parameters below) Technical: efficiency , min_load , efficiency_at_min_load , min_uptime , min_downtime min_load - [0-1] Minimum load of the unit. Applies only if the unit has an online variable. With linear startups, it is the share of capacity started up. Constant or time. availability - [e.g. 0.9 means 90%] Fraction of capacity available for flows from/to the unit. For online units, the online variable is multiplied by the availability. Constant or time. Economic: startup_cost , fixed_cost (fuel cost comes through the use of fuel commodities and other variable costs are defined for flows between unit and node, see below)","title":"Main data items for units"},{"location":"reference/#investment-parameters-for-capacity-expansion","text":"invest_method - Choice of investment method: either not_allowed or then a combination of invest and/or retire investment limits for each period and/or for all periods ( total ) or no_limit lifetime_method to choose how the investments behave after unit runs out of lifetime. Automatic reinvestment (reinvest_automatic - default) causes the model to keep the capacity until the end of model horizon and applies the annualized investment cost until the end of model horizon without further choice by the model. Choice of reinvestment (reinvest_choice) removes the capacity at the end of the lifetime and the model needs to decide how much new capacity is to be built. If there is a need to remove the possibility to invest after lifetime, then the investment limits can be used. invest_cost - [CUR/kW] Investment cost for new capacity. Constant or period. salvage_value - [CUR/kW] Salvage value of the unit capacity. Constant or period. lifetime - [years] Lifetime of the unit. Constant or period. interest_rate - [unitless, e.g. 0.05 means 5%] Interest rate for investments. Constant or period. invest_max_total - [MW] Maximum capacity investment over all solves. Constant. invest_max_period - [MW] Maximum capacity investment for each period. Period. invest_min_total - [MW] Maximum capacity investment over all solves. Constant. invest_min_period - [MW] Maximum capacity investment for each period. Period. invest_forced - [MWh] Capacity that must be invested in a given period. Investment cost will be included in the cost results even though the model does not have an investment variable. Constant or period. retire_cost - [CUR/kW] Retirement cost for new capacity. Constant or period. retire_max_total - [MW] Maximum capacity retirement over all solves. Constant. retire_max_period - [MW] Maximum capacity retirement for each period. Period. retire_min_total - [MW] Minimum capacity retirement over all solves. Constant. retire_min_period - [MW] Minimum capacity retirement for each period. Period. retire_forced - [MW] Capacity that must be invested in a given period. Retirement cost will be included in the cost results even though the model does not have an retirement variable. Constant or period. fixed_cost - [CUR/kW] Annual fixed cost for capacity. Constant or period. virtual_unitsize - [MWh] Size of a single unit - used for integer investments (lumped investments). If not given, assumed from the existing capacity.","title":"Investment parameters for capacity expansion"},{"location":"reference/#discount-calculations","text":"Each asset that can be invested in should have invest_cost , lifetime and interest_rate parameters set and could have an optional fixed_cost . These are used to calculate the annuity of the investment. Annuity is used to annualize the investment cost, since FlexTool scales all costs (operational, investment and fixed) to annual level in order to make them comparable. Annuity is calculated as follows: invest_cost * interest_rate / { 1 - [ 1 / ( 1 + interest_rate ) ] ^ lifetime } + fixed_cost The next step is to consider discounting - future is valued less than the present. There is a model-wide assumption for the discount_rate . By default it is 0.05 (i.e. 5%), but it can be changed through the discount_rate parameter set for the flexTool model object. Discount factor for every period in the model is calculated from the discount_rate using the years_represented parameter of each solve , which how many years the period represents. Values for years_represented are used to calculate how many years_from_solve_start each year is. The formula is: [ 1 / ( 1 + discount_rate ) ] ^ years_from_solve_start Operational costs are also discounted using the same discount_rate . However, with operational costs it is assumed that they take place on average at the middle of the year whereas investment costs are assumed to take place at the beginning of the year (they are available for the whole year). These can be tweaked with the discount_offset_investments and discount_offset_operations parameters (given in years). Please note that given this formulation, invest_cost should be the overnight built cost (as is typical in energy system modelling, the model does not assume any construction time - the financing costs of the construction period need to be included in your cost assumptions). The model has a model horizon based on the years_represented parameters. The model will not include discounted investment annuities after the model horizon (in other words, the investments are 'returned' at the end of the model horizon). Naturally also operational costs are included only until the end of the model horizon. Finally, the retirements work similar to investments using the same discount_rate and interest_rate parameters but with salvage_value as the benefit from retiring the unit.","title":"Discount calculations"},{"location":"reference/#relationship-of-a-unit-to-a-node-and-determination-of-the-type-of-relationship","text":"If the unit\u2019s outputs are flowing into the node, the node acts as output for the unit. If the unit\u2019s inputs are flowing out of the node (into the unit), the node acts as input for the unit. Not all units necessary have both an input and an output node. E.g. VRE generators have only output nodes and their generation is driven by profiles","title":"Relationship of a unit to a node and determination of the type of relationship"},{"location":"reference/#properties-of-unit-inputnode-and-unit-outputnode-relationships","text":"is_non_synchronous - Chooses whether the unit is synchronously connected to this node. coefficient - [factor] Coefficient to scale the output from a unit to a particular node. Can be used e.g. to change unit of measurement or to remove the flow by using zero as the coefficient (the flow variable can still be used in user constraints). Constant. other_operational_cost - [CUR/MWh] Other operational variable costs for energy flows. Constant or time. inertia_constant - [MWs/MW] Inertia constant for a synchronously connected unit to this node. Constant. ramp_method - Choice of ramp method. 'ramp_limit' poses a limit on the speed of ramp. 'ramp_cost' poses a cost on ramping the flow (NOT FUNCTIONAL AS OF 19.3.2023). ramp_cost - [CUR/MW] Cost of ramping the unit. Constant. ramp_speed_up - [per unit / minute] Maximum ramp up speed. Constant. ramp_speed_down - [per unit / minute] Maximum ramp down speed. Constant.","title":"Properties of unit--inputNode and unit--outputNode relationships"},{"location":"reference/#units-constrained-by-profiles","text":"Some generators (e.g. VRE) are not converting energy from one node to the other. Instead, their generation is determined (or limited) by a specific generation profile set by a profile object with a profile_method , thats state whether the profile forces an upper_limit , lower_limit or equal ity. Finally profile object is given a profile time series (or it can also be a constant). One needs to use node__profile , unit__node__profile or connection__profile to apply the profile to specific energy flow (or storage state in the case of node__profile ).","title":"Units constrained by profiles"},{"location":"reference/#connections","text":"Connections can transfer energy between two nodes. Parameters for the connection are defined in the connection object, but the two nodes it connects are defined by establishing a relationship between connection--leftNode--rightNode .","title":"Connections"},{"location":"reference/#defining-how-the-connection-functions","text":"is_active to state the alternative where the connection becomes active transfer_method to define the way the connection transfers energy between the nodes startup_method where linear startup means that the unit can start partially (anything between 0 and full capacity) but will face startup cost as well as minimum load limit based on the capacity started up. binary startup means that the unit is either off or fully on, but it is computationally more demanding than linearized startups. invest_method to define investment and retirement limits: either not_allowed or then a combination of invest and/or retire investment limits for each period and/or for all periods ( total ) or no_limit lifetime_method to choose how the investments behave after unit runs out of lifetime. Automatic reinvestment (reinvest_automatic - default) causes the model to keep the capacity until the end of model horizon and applies the annualized investment cost until the end of model horizon without further choice by the model. Choice of reinvestment (reinvest_choice) removes the capacity at the end of the lifetime and the model needs to decide how much new capacity is to be built. If there is a need to remove the possibility to invest after lifetime, then the investment limits can be used.","title":"Defining how the connection functions"},{"location":"reference/#main-data-items-for-connections","text":"existing - [MW] Existing capacity. Constant. efficiency - [factor, typically between 0-1] Efficiency of a connection. Constant or time. constraint_capacity_coefficient - A map of coefficients (Index: constraint name, value: coefficient) to represent the participation of the connection capacity in user-defined constraints. [(invest - divest variable) x coefficient] will be added to the left side of the constraint equation. Invest and divest variables are not multiplied by unitsize. other_operational_cost - [CUR/MWh] Other operational variable cost for trasferring over the connection. Constant or time. fixed_cost - [CUR/kW] Annual fixed cost. Constant or period. invest_cost - [CUR/kW] Investment cost for new 'virtual' capacity. Constant or period. interest_rate - [e.g. 0.05 equals 5%] Interest rate for investments. Constant or period. lifetime - [years] Used to calculate annuity together with interest rate. Constant or period. other investment parameters: invest_max_total , invest_max_period , invest_min_total , invest_min_period , invest_forced , salvage_value is_DC - A flag whether the connection is DC (the flow will not be counted as synchronous if there is a non_synchronous_limit ). Default false. virtual_unitsize - [MW] Size of single connection - used for integer (lumped) investments. availability - [e.g. 0.9 means 90%] Fraction of capacity available for connection flows. Constant or time.","title":"Main data items for connections"},{"location":"reference/#investment-parameters-for-connections","text":"These are the same as for units, see here","title":"Investment parameters for connections"},{"location":"reference/#commodities","text":"Some nodes can act as a source or a sink of commodities instead of forcing a balance between inputs and outputs. To make that happen, commodities must have a price and be connected to those nodes that serve (or buy) that particular commodity at the given price . In other words, commodity is separate from node so that the user can use the same commodity properties for multiple nodes. Commodities can also have a co2_content . The commodity and its nodes are connected by establishin a new relationship between the commodity and each of its nodes (e.g. coal--coal_market ). price - [CUR/MWh or other unit] Price of the commodity. Constant or period. co2_content - [CO2 ton per MWh] Constant.","title":"Commodities"},{"location":"reference/#groups","text":"Groups are used to make constraints that apply to a group of nodes, units and/or connections. A group is defined by creating a group object and then creating a relationship between the group and its members. The membership relationship classes are group__node , group__unit , group__connection , group__unit__node , group__connection__node and reserve__upDown__group . The choice of group members depends on what the group is trying to achieve. For instance a group that limits investments could have a set of units included in the group.","title":"Groups"},{"location":"reference/#capacity-limits-for-nodes-units-and-connections","text":"invest_method - the choice of method how to limit or force investments in capacity [MW or MWh] of the group members invest_max_total - [MW or MWh] Maximum investment to the virtual capacity of a group of units or to the storage capacity of a group of nodes. Total over all solves. invest_max_period - [MW or MWh] Maximum investment per period to the virtual capacity of a group of units or to the storage capacity of a group of nodes. invest_min_total - [MW or MWh] Minimum investment to the virtual capacity of a group of units or to the storage capacity of a group of nodes. Total over all solves. invest_min_period - [MW or MWh] Minimum investment per period to the virtual capacity of a group of units or to the storage capacity of a group of nodes.","title":"Capacity limits for nodes, units and connections"},{"location":"reference/#cumulative-and-instant-flow-limits-for-unit__nodes-and-connection__nodes","text":"max_cumulative_flow - [MW] Limits the maximum cumulative flow for a group of connection_nodes and/or unit_nodes. It needs to be expressed as average flow, since the limit is multiplied by the model duration to get the cumulative limit (e.g. by 8760 if a single year is modelled). Applied for each solve. Constant or period. min_cumulative_flow - [MW] Limits the minimum cumulative flow for a group of connection_nodes and/or unit_nodes. It needs to be expressed as average flow, since the limit is multiplied by the model duration to get the cumulative limit (e.g. by 8760 if a single year is modelled). Applied for each solve. Constant or period. max_instant_flow - [MW] Maximum instantenous flow for the aggregated flow of all group members. Constant or period. min_instant_flow - [MW] Minimum instantenous flow for the aggregated flow of all group members. Constant or period.","title":"Cumulative and instant flow limits for unit__nodes and connection__nodes"},{"location":"reference/#limits-for-nodes","text":"has_inertia - A flag whether the group of nodes has an inertia constraint active. inertia_limit - [MWs] Minimum for synchronous inertia in the group of nodes. Constant or period. penalty_inertia - [CUR/MWs] Penalty for violating the inertia constraint. Constant or period. has_non_synchronous - A flag whether the group of nodes has the non-synchronous share constraint active. non_synchronous_limit - [share, e.g. 0.8 means 80%] The maximum share of non-synchronous generation in the node group. Constant or period. penalty_non_synchronous - [CUR/MWh] Penalty for violating the non synchronous constraint. Constant or period. has_capacity_margin - A flag whether the group of nodes has a capacity margin constraint in the investment mode. capacity_margin - [MW] How much capacity a node group is required to have in addition to the peak net load in the investment time series. Used only by the investment mode. Constant or period. penalty_capacity_margin - [CUR/MWh] Penalty for violating the capacity margin constraint. Constant or period.","title":"Limits for nodes"},{"location":"reference/#co2-costs-and-limits","text":"co2_method - Choice of the CO2 method or a combination of methods: no_method, price, period, total, price_period, price_total, period_total, price_period_total. co2_price [CUR/ton] CO2 price for a group of nodes. Constant or period. co2_max_period [tCO2] Maximum limit for emitted CO2 in each period. co2_max_total [tCO2] Maximum limit for emitted CO2 in the whole solve.","title":"CO2 costs and limits"},{"location":"reference/#controlling-outputs","text":"Some results are output for groups of nodes. This means that instead of getting output for each node separately, nodes can be grouped and the aggregated results can be examined. For example it can be helpful to group all electricity nodes and show their aggregated output. output_results - A flag to output aggregated results for the group members. Some of the outputs are not created by default. This is done to speed up the post-processing of results. The user can enable them by changing parameters of the the model entity: enable_optional_outputs : [Array], Produces additional outputs. Allowed outputs: \"ramp_envelope\",\"node_balance_t\",\"connection_flow_separate\" ramp_envelope : Includes seven parameters that form the ramp room envelope (how much there is additional ramping capability in a given node). node_balance_t : Produces detailed inflows and outflows for all the nodes for all timesteps. Mainly useful to diagnose what is wrong with the model. connection_flow_separate : Produces the connection flows separately for both directions. Additionally some of the default outputs can be disabled if user needs more speed and the outputs are not used. disable_optional_outputs : [Array], Disable some of the default outputs to reduce the time used. Allowed outputs to be disabled: \"unit__node_flow_t\",\"connection__node__node_flow_t\" unit_flow_t : The flows from units to the nodes for each timestep. connection_flow_t : The flows between the nodes for each timestep.","title":"Controlling outputs"},{"location":"reference/#reserves","text":"The user defines reserve categories through reserve object. Reserves are reservations of capacity (either upward or downward) and that capacity will not therefore be available for other use (flowing energy or commodities). There are three different ways how a reserve requirement can be calculated: timeseries, large_failure and dynamic. Timeseries requires that the user provides a pre-defined time series for the amount of reserve to be procured in each time step. Large_failure requires that the user defines the energy flows that could be the largest failure in the system. The highest possible failure (flow multiplied by large_failure_ratio ) in each timestep will then set the reserve requirement for that timestep. Dynamic means that there is a requirement based on user chosen energy flows - each participating flow is multipled by increase_reserve_ratio and then summed to form the reserve requirement. This can be useful for covering variability within timesteps. Also demand variability can be included through increase_reserve_ratio parameter in reserve__upDown__group relationship. When the same reserve category (e.g. primary upward) has more than one of these (timeseries, large_failure and dynamic) in use, then the largest requirement will apply for that timestep. If they are separated into different reserves, then they need to be fulfilled separately. Reserve requirement is defined for groups of nodes. This means that multiple nodes can have a common reserve requirement (but it is also possible to make a group with only one node). One node can be in multiple groups and therefore subject to multiple overlapping reserve requirements. Only units can generate reserve, but connections can move reserve from one node to another (therefore, there is no impact if the nodes are in the same reserve group, but it can be useful to import reserve from outside the group).","title":"Reserves"},{"location":"reference/#reserve-groups","text":"For reserve__upDown__group relationships: reserve_method - Choice of reserve method (timeseries, large_failure, dynamic or their combination). reservation - [MWh] Amount of reserve required. Constant or time. reserve_penalty - [\u20ac/MWh] Penalty cost for not fulfilling the reserve requirement. increase_reserve_ratio - [factor] The reserve is increased by the sum of demands from the group members multiplied by this ratio. Constant.","title":"Reserve groups"},{"location":"reference/#reserve-provision-by-units","text":"For reserve__upDown__unit__node relationships: is_active - Can the unit provide this reserve. Empty indicates not allowed. Use 'yes' to indicate true. max_share - [factor] Maximum ratio for the transfer of reserve from the unit to the node. Constant. reliability - [factor] The share of the reservation that is counted to reserves (sometimes reserve sources are not fully trusted). Constant. increase_reserve_ratio - [factor] The reserve requirement is increased by the flow between the unit and the node multiplied by this ratio. Constant. large_failure_ratio - [factor] Each unit using the N-1 failure method will have a separate constraint to require sufficient reserve to cover a failure of the unit generation (multiplied by this ratio). Constant.","title":"Reserve provision by units"},{"location":"reference/#reserve-transfer-by-connections","text":"For reserve__upDown__connection__node relationships: is_active - Can the unit provide this reserve. Empty indicates not allowed. Use 'yes' to indicate true. max_share - [factor] Maximum ratio for the transfer of reserve to this node. Constant. reliability - [factor] The share of the reservation that is counted to reserves (sometimes reserve sources are not fully trusted). Constant. increase_reserve_ratio - [factor] The reserve is increased by generation from this unit multiplied this ratio. Constant. large_failure_ratio - [factor] Each connection using the N-1 failure method will have a separate constraint to require sufficient reserve to cover a failure of the connection (multiplied by this ratio). Constant.","title":"Reserve transfer by connections"},{"location":"reference/#additional-objects-for-further-functionality","text":"constraint : to create user defined constraints between flow, state, and capacity variables (for nodes, units and connections)","title":"Additional objects for further functionality"},{"location":"results/","text":"Results FlexTool outputs results typical to a planning model or a scheduling model, but it also tries to highlight potential flexibility issues in the system. The outputs from the latest run are initially CSV files and can befound in the folder 'output'. File 'summary_solve.csv' can give a quick overview of potential issues in the solve - it is a diagnostic file. The other files are all numerical results and will be imported to a Spine database by the FlexTool workflow. Costs Prices Energy flows Energy balance in nodes Group results Capacity and investment results CO2 emissions Reserves Inertia and non-synchronous generation Ramps Slack and penalty values Costs model object cost parameter - [CUR] includes annualized total cost as well as annualized costs divided into unit investment/retirement - [CUR] cost of investing in unit capacity or benefits from salvaging unit capacity connection investment/retirement - [CUR] cost of investing in connection capacity or benefits from salvaging connection capacity storage investment/retirement - [CUR] cost of investing in storage capacity or benefits from salvaging storage capacity commodity - [CUR] cost of unit using commodity inputs or benefit of selling commodities (negative value) CO2 - [CUR] cost of CO2 emissions caused by unit using commodities with CO2 content variable cost - [CUR] other variable operation and maintenance costs starts - [CUR] start up costs upward penalty - [CUR] cost of involuntary demand reduction downward penalty - [CUR] cost of involuntary demand increase inertia penalty - [CUR] cost of not meeting the inertia constraint non-synchronous penalty - [CUR] cost of not meeting the non-synchronous constraint capacity margin penalty - [CUR] cost of not meeting the capacity margin constraint upward reserve penalty - [CUR] cost of not meeting the upward reserve constraint downward reserve penalty - [CUR] cost of not meeting the downward reserve constraint model object cost_t parameter - [CUR] similar as above but costs given for each timestep (no investment/retirement costs) Prices node object price_t parameter - [CUR/MWh] each node that maintains an energy balance provides a price time series based on the marginal value of the balance constraint Energy flows unit__node relationship flow parameter - [MWh] cumulative flow from the node (if node is input) or to the node (if node is output) unit__node relationship flow_t parameter - [MWh] flow from the node (if node is input) or to the node (if node is output) connection__node__node relationship flow parameter - [MWh] cumulative flow through the connection (left to right is positive) connection__node__node relationship flow_t parameter - [MWh] flow through the connection (left to right is positive) Capacity factors unit__node relationship cf parameter - [per unit] average capacity factor of the flow, i.e. the utilization rate of the flow from/to the unit. Average of flow [MWh/h] divided by capacity [MW] of the input or output to the unit. connection relationship cf parameter - [per unit] average capacity factor of the flow, i.e. the utilization rate of the connection where flows in both directions are considered as utilization. Average of the absolute flow [MWh/h] divided by the capacity of the connection. Energy balance in nodes node object balance parameter - [MWh] cumulative inputs (positive) and outputs (negative) to the node from all the possible sources ( from_units , from_connection , to_units , to_connections , state change over the period, self discharge during the period, upward slack for involuntary demand reduction and downward slack for involuntary demand increase) node object balance_t parameter - [MWh] same as above, but for each timestep node object state_t parameter - [MWh] storage state of the node in each timestep node object state_t parameter - storage state of the node in each timestep (typically MWh). Unit online and startup unit object online_average parameter - [count] average online status of the unit (average number of units online during the period) unit object online_t parameter - [count] online status of the unit (number of units online in each timestep) unit object startup_cumulative parameter - [count] cumulative number of unit startups during the period Group results group object indicator parameter - gives a set of results for all node members of the group sum of annualized inflows - [MWh] sum of inflow to the node which has been annualized (scaled to correspond to a year of timesteps) VRE share - [0-1] how much the flows from VRE sources (inputs using 'upper limit' profile) are of the inflow curtailed VRE share - [0-1] how much the unused flows from VRE sources would have been of the inflow upward slack share - [0-1] upward slack in relation to the inflow downward slack share - [0-1] downward slack in relation to the inflow Capacity and investment results unit , connection and node objects capacity parameter - [MW or MWh] include the following parameters existing - [MW or MWh] capacity that was assumed to exist in the beginning of the solve invested - [MW or MWh] capacity the model decided to invest for the given period retired - [MW or MWh] capacity the model decided to retire in the beginning of the given period total - [MW or MWh] sum of existing , invested and retired capacities unit , connection and node objects invest_marginal parameter - [CUR/MW or MWh] marginal cost to invest in one more MW or MWh of capacity (zero value means that the model has invested in optimal amount; negative value means that if the model would be able to invest more, it could reduce total cost by the stated amount per MW or MWh; positive value means the cost is higher than the benefit by the stated amount per MW or MWh) group parameter slack_capacity_margin - [MW or MWh] use of slack variable and the associated penalty cost to meet the capacity margin requirement in the period group parameter slack_capacity_margin - use of slack variable and the associated penalty cost to meet the capacity margin requirement in the period CO2 emissions unit object co2 parameter - [tCO2] how many tons of CO2 the unit has generated (by using commodity with CO2 content) or removed Reserves unit__reserve__upDown__node relationship reservation_t parameter - [MW] how much upward or downward reserve particular unit was providing to a particular node in given timestep unit__reserve__upDown__node relationship reservation_average parameter - [MW] how much upward or downward reserve particular unit was providing to a particular node in average during the period group__reserve__upDown relationship slack_reserve_t parameter - [MW] use of slack variable and the associated penalty cost to fulfill the upward or downward reserve requirement in each timestep group__reserve__upDown relationship slack_reserve parameter - [MW] cumulative use of slack variable and the associated penalty cost to fulfill the upward or downward reserve requirement during the period Inertia and non-synchronous generation group object inertia_t parameter - [MWs] the amount of inertia (MWs) in the group of nodes in each timestep group object slack_inertia_t parameter - [MWs] use of slack variable and the associated penalty cost to fulfill the inertia requirement in each timestep group object slack_nonsync_t parameter - [MWh] use of slack variable and the associated penalty cost to fulfill the non-synchronous share maximum share constraint in each timestep Ramps node object ramp_t parameter - includes seven parameters that form the ramp room envelope (how much there is additional room to ramp in a give node) ramp - [MW] the actual ramp in the node from previous timestep to this timestep units_up - [MW] additional room for upward ramps from non-VRE units connected to the node VRE_up - [MW] adds upward ramp room from VRE units on top of the ramp room from non-VRE units connections_up - [MW] adds upward ramp room from connections on top of the previous ramp rooms (does not consider whether the connected node has ramp room, but is simply the available capacity in the connection) units_down - [MW] additional room for downward ramps from non-VRE units connected to the node VRE_down - [MW] adds downward ramp room from VRE units on top of the ramp room from non-VRE units connections_down - [MW] adds downward ramp room from connections on top of the previous ramp rooms (does not consider whether the connected node has ramp room, but is simply the available capacity in the connection) unit__node relationship ramp_t parameter - [MW] shows ramping of particular input or output flow between a unit and a node for each time step Slack and penalty values Slack and penalty values are listed in various places above (costs, energy balance, reserves, inertia and non-sychronous generation).","title":"Model outputs"},{"location":"results/#results","text":"FlexTool outputs results typical to a planning model or a scheduling model, but it also tries to highlight potential flexibility issues in the system. The outputs from the latest run are initially CSV files and can befound in the folder 'output'. File 'summary_solve.csv' can give a quick overview of potential issues in the solve - it is a diagnostic file. The other files are all numerical results and will be imported to a Spine database by the FlexTool workflow. Costs Prices Energy flows Energy balance in nodes Group results Capacity and investment results CO2 emissions Reserves Inertia and non-synchronous generation Ramps Slack and penalty values","title":"Results"},{"location":"results/#costs","text":"model object cost parameter - [CUR] includes annualized total cost as well as annualized costs divided into unit investment/retirement - [CUR] cost of investing in unit capacity or benefits from salvaging unit capacity connection investment/retirement - [CUR] cost of investing in connection capacity or benefits from salvaging connection capacity storage investment/retirement - [CUR] cost of investing in storage capacity or benefits from salvaging storage capacity commodity - [CUR] cost of unit using commodity inputs or benefit of selling commodities (negative value) CO2 - [CUR] cost of CO2 emissions caused by unit using commodities with CO2 content variable cost - [CUR] other variable operation and maintenance costs starts - [CUR] start up costs upward penalty - [CUR] cost of involuntary demand reduction downward penalty - [CUR] cost of involuntary demand increase inertia penalty - [CUR] cost of not meeting the inertia constraint non-synchronous penalty - [CUR] cost of not meeting the non-synchronous constraint capacity margin penalty - [CUR] cost of not meeting the capacity margin constraint upward reserve penalty - [CUR] cost of not meeting the upward reserve constraint downward reserve penalty - [CUR] cost of not meeting the downward reserve constraint model object cost_t parameter - [CUR] similar as above but costs given for each timestep (no investment/retirement costs)","title":"Costs"},{"location":"results/#prices","text":"node object price_t parameter - [CUR/MWh] each node that maintains an energy balance provides a price time series based on the marginal value of the balance constraint","title":"Prices"},{"location":"results/#energy-flows","text":"unit__node relationship flow parameter - [MWh] cumulative flow from the node (if node is input) or to the node (if node is output) unit__node relationship flow_t parameter - [MWh] flow from the node (if node is input) or to the node (if node is output) connection__node__node relationship flow parameter - [MWh] cumulative flow through the connection (left to right is positive) connection__node__node relationship flow_t parameter - [MWh] flow through the connection (left to right is positive)","title":"Energy flows"},{"location":"results/#capacity-factors","text":"unit__node relationship cf parameter - [per unit] average capacity factor of the flow, i.e. the utilization rate of the flow from/to the unit. Average of flow [MWh/h] divided by capacity [MW] of the input or output to the unit. connection relationship cf parameter - [per unit] average capacity factor of the flow, i.e. the utilization rate of the connection where flows in both directions are considered as utilization. Average of the absolute flow [MWh/h] divided by the capacity of the connection.","title":"Capacity factors"},{"location":"results/#energy-balance-in-nodes","text":"node object balance parameter - [MWh] cumulative inputs (positive) and outputs (negative) to the node from all the possible sources ( from_units , from_connection , to_units , to_connections , state change over the period, self discharge during the period, upward slack for involuntary demand reduction and downward slack for involuntary demand increase) node object balance_t parameter - [MWh] same as above, but for each timestep node object state_t parameter - [MWh] storage state of the node in each timestep node object state_t parameter - storage state of the node in each timestep (typically MWh).","title":"Energy balance in nodes"},{"location":"results/#unit-online-and-startup","text":"unit object online_average parameter - [count] average online status of the unit (average number of units online during the period) unit object online_t parameter - [count] online status of the unit (number of units online in each timestep) unit object startup_cumulative parameter - [count] cumulative number of unit startups during the period","title":"Unit online and startup"},{"location":"results/#group-results","text":"group object indicator parameter - gives a set of results for all node members of the group sum of annualized inflows - [MWh] sum of inflow to the node which has been annualized (scaled to correspond to a year of timesteps) VRE share - [0-1] how much the flows from VRE sources (inputs using 'upper limit' profile) are of the inflow curtailed VRE share - [0-1] how much the unused flows from VRE sources would have been of the inflow upward slack share - [0-1] upward slack in relation to the inflow downward slack share - [0-1] downward slack in relation to the inflow","title":"Group results"},{"location":"results/#capacity-and-investment-results","text":"unit , connection and node objects capacity parameter - [MW or MWh] include the following parameters existing - [MW or MWh] capacity that was assumed to exist in the beginning of the solve invested - [MW or MWh] capacity the model decided to invest for the given period retired - [MW or MWh] capacity the model decided to retire in the beginning of the given period total - [MW or MWh] sum of existing , invested and retired capacities unit , connection and node objects invest_marginal parameter - [CUR/MW or MWh] marginal cost to invest in one more MW or MWh of capacity (zero value means that the model has invested in optimal amount; negative value means that if the model would be able to invest more, it could reduce total cost by the stated amount per MW or MWh; positive value means the cost is higher than the benefit by the stated amount per MW or MWh) group parameter slack_capacity_margin - [MW or MWh] use of slack variable and the associated penalty cost to meet the capacity margin requirement in the period group parameter slack_capacity_margin - use of slack variable and the associated penalty cost to meet the capacity margin requirement in the period","title":"Capacity and investment results"},{"location":"results/#co2-emissions","text":"unit object co2 parameter - [tCO2] how many tons of CO2 the unit has generated (by using commodity with CO2 content) or removed","title":"CO2 emissions"},{"location":"results/#reserves","text":"unit__reserve__upDown__node relationship reservation_t parameter - [MW] how much upward or downward reserve particular unit was providing to a particular node in given timestep unit__reserve__upDown__node relationship reservation_average parameter - [MW] how much upward or downward reserve particular unit was providing to a particular node in average during the period group__reserve__upDown relationship slack_reserve_t parameter - [MW] use of slack variable and the associated penalty cost to fulfill the upward or downward reserve requirement in each timestep group__reserve__upDown relationship slack_reserve parameter - [MW] cumulative use of slack variable and the associated penalty cost to fulfill the upward or downward reserve requirement during the period","title":"Reserves"},{"location":"results/#inertia-and-non-synchronous-generation","text":"group object inertia_t parameter - [MWs] the amount of inertia (MWs) in the group of nodes in each timestep group object slack_inertia_t parameter - [MWs] use of slack variable and the associated penalty cost to fulfill the inertia requirement in each timestep group object slack_nonsync_t parameter - [MWh] use of slack variable and the associated penalty cost to fulfill the non-synchronous share maximum share constraint in each timestep","title":"Inertia and non-synchronous generation"},{"location":"results/#ramps","text":"node object ramp_t parameter - includes seven parameters that form the ramp room envelope (how much there is additional room to ramp in a give node) ramp - [MW] the actual ramp in the node from previous timestep to this timestep units_up - [MW] additional room for upward ramps from non-VRE units connected to the node VRE_up - [MW] adds upward ramp room from VRE units on top of the ramp room from non-VRE units connections_up - [MW] adds upward ramp room from connections on top of the previous ramp rooms (does not consider whether the connected node has ramp room, but is simply the available capacity in the connection) units_down - [MW] additional room for downward ramps from non-VRE units connected to the node VRE_down - [MW] adds downward ramp room from VRE units on top of the ramp room from non-VRE units connections_down - [MW] adds downward ramp room from connections on top of the previous ramp rooms (does not consider whether the connected node has ramp room, but is simply the available capacity in the connection) unit__node relationship ramp_t parameter - [MW] shows ramping of particular input or output flow between a unit and a node for each time step","title":"Ramps"},{"location":"results/#slack-and-penalty-values","text":"Slack and penalty values are listed in various places above (costs, energy balance, reserves, inertia and non-sychronous generation).","title":"Slack and penalty values"},{"location":"spine_database/","text":"Data structure in Spine databases Spine databases use Entity-Attribute-Value with Classes and Relationships (EAV-CR). Entity classes define the categories of data. These can be one-dimensional object classes (e.g. node or unit ) or multi-dimensional relationship classes formed from the object classes (e.g. unit__node ). Spine Toolbox user can define these classes to suit their modelling needs. For FlexTool the entity classes have been pre-defined. Instead, FlexTool user needs to add the entity instances: objects and relationships that define the particular network structure to be modelled (e.g. coal_plant unit or west node ). Furthermore, each entity class (object or relationship) can hold only parameters that have been defined for that particular class. Again, FlexTool user does not need to add the parameter types - the user should just add needed parameter values for the entities the user has created. Database editor in brief Spine Toolbox database editor can be used to modify data and to build scenarios. The figure below shows an example where parameter data from two alternatives have been selected for display (in the data table). The object tree on the left selects two nodes ('coal_market' and 'west') as well as one unit ('coal_plant'). Consequently, one can use both whole classes and individual entities (members of the classes) as data filters. The results of this filter are visualized in the graph on top. The mouse pointer is showing a relationship entity that connects the 'coal_plant' and its output node 'west'. The relationship entity is defined in a relationship tree, which is not visible here. The scenario tree (on the right, below the alternative tree) shows that the 'coal' scenario is formed by taking all data from the 'init' alternative and then all data from the 'coal' alternative . If there would be same parameter defined for both scenarios , then the latter alternative would overwrite the first alternative . Whenever data is modified, the data is staged in separate database tables (although not directly visible to user). The changes will be applied only once the user commits the changes and leaves a commit message to indicate what has been done. The commit can be done with ctrl-enter or from the database editor menu (triple bar at top-right). The database editor menu has options for how to display the data: table view, different pivot views and a graph view. It also contains a tool to delete data ( purge ) and decrease database size by removing unused allocations ( vacuum ). You can also bring back dock windows that have been closed by the user. History will show the history of data changes based on the commits made by the user. More on Spine Database editor in https://spine-toolbox.readthedocs.io/en/latest/spine_db_editor/index.html.","title":"Data structure in Spine databases"},{"location":"spine_database/#data-structure-in-spine-databases","text":"Spine databases use Entity-Attribute-Value with Classes and Relationships (EAV-CR). Entity classes define the categories of data. These can be one-dimensional object classes (e.g. node or unit ) or multi-dimensional relationship classes formed from the object classes (e.g. unit__node ). Spine Toolbox user can define these classes to suit their modelling needs. For FlexTool the entity classes have been pre-defined. Instead, FlexTool user needs to add the entity instances: objects and relationships that define the particular network structure to be modelled (e.g. coal_plant unit or west node ). Furthermore, each entity class (object or relationship) can hold only parameters that have been defined for that particular class. Again, FlexTool user does not need to add the parameter types - the user should just add needed parameter values for the entities the user has created.","title":"Data structure in Spine databases"},{"location":"spine_database/#database-editor-in-brief","text":"Spine Toolbox database editor can be used to modify data and to build scenarios. The figure below shows an example where parameter data from two alternatives have been selected for display (in the data table). The object tree on the left selects two nodes ('coal_market' and 'west') as well as one unit ('coal_plant'). Consequently, one can use both whole classes and individual entities (members of the classes) as data filters. The results of this filter are visualized in the graph on top. The mouse pointer is showing a relationship entity that connects the 'coal_plant' and its output node 'west'. The relationship entity is defined in a relationship tree, which is not visible here. The scenario tree (on the right, below the alternative tree) shows that the 'coal' scenario is formed by taking all data from the 'init' alternative and then all data from the 'coal' alternative . If there would be same parameter defined for both scenarios , then the latter alternative would overwrite the first alternative . Whenever data is modified, the data is staged in separate database tables (although not directly visible to user). The changes will be applied only once the user commits the changes and leaves a commit message to indicate what has been done. The commit can be done with ctrl-enter or from the database editor menu (triple bar at top-right). The database editor menu has options for how to display the data: table view, different pivot views and a graph view. It also contains a tool to delete data ( purge ) and decrease database size by removing unused allocations ( vacuum ). You can also bring back dock windows that have been closed by the user. History will show the history of data changes based on the commits made by the user. More on Spine Database editor in https://spine-toolbox.readthedocs.io/en/latest/spine_db_editor/index.html.","title":"Database editor in brief"},{"location":"spine_toolbox/","text":"IRENA FlexTool workflow shortly explained IRENA FlexTool workflow is a Spine Toolbox workflow that can be modified by the user. The workflow provided in the repository is a template Spine Toolbox project that can be either copied for local changes or the workflow data input data files can be switched to local files. It is also possible to work directly with the template, but then one needs to be careful when pulling a new version of IRENA FlexTool since that can overwrite local changes (the input data file contents need to be copied to safety before updating). If you are using the IRENA FlexTool browser-interface , then you will not directly see the Spine Toolbox workflow, but the FlexTool web-server will be executing parts of the workflow in the background as you develop and run the model. The panel on the right shows the different scenarios that are available in the database. The user can choose which scenarios will be processed by the workflow (until item Results , which combines the results into one database). Spine Toolbox can execute scenarios in parallel (as long as using 'work directories' is defined in FlexTool item). Input data workflow item points to a sqlite file that needs to have IRENA FlexTool data format (that uses Spine Toolbox database definition). The template file has the right format and contains empty object classes corresponding to FlexTool data structure as well as parameters available in each object class. Double clicking the Input data workflow item will open the database editor. Just selecting the Input data workflow item allows one to change the file (make a copy of the existing Input_data.sqlite using the file system of your OS and point to the copy). Init workflow item points to a sqlite file with predefined data that showcases IRENA FlexTool functionality. Some of the scenarios from there are used in the user guide. Initialize copies the contents of the Init database to the Input data database. The scenario filter in the arrow after the Init database can be used to choose what data will be copied. Export_to_csv workflow item is a Spine Toolbox exporter that has been set to write csv files that IRENA FlexTool model code will read. FlexTool workflow item contains a Python script that calls FlexTool model code for each solve and passes data between these solves. FlexTool model is written in MathProg and it calls HiGHS solver by default to solve the model. The outputs are csv files. Import_results is a Spine Toolbox importer that takes the output csv files and writes them in the Results database. Excel_input_data and Import_from_Excel allow users to use Excel as an interface for the input data. They are optional parts of the workflow. To_Excel worfklow item will export most scenario results to a simple Excel file. One way to utilize this is by creating another Excel file that draws figures from the result Excel file that is then updated by the workflow. The browser interface of FlexTool also runs part of this same workflow ( Export_to_csv --> FlexTool --> Import_results ). The server takes a copy of the workflow (inside the user_projects) folder and uses Spine Toolbox to execute the scenarios. More instructions for Spine Toolbox in Toolbox User Guide . Data structure in Spine databases Spine databases use Entity-Attribute-Value with Classes and Relationships (EAV-CR). Entity classes define the categories of data. These can be one-dimensional object classes (e.g. node or unit ) or multi-dimensional relationship classes formed from the object classes (e.g. unit__node ). Spine Toolbox user can define these classes to suit their modelling needs. For FlexTool the entity classes have been pre-defined. Instead, FlexTool user needs to add the entity instances: objects and relationships that define the particular network structure to be modelled (e.g. coal_plant unit or west node ). Furthermore, each entity class (object or relationship) can hold only parameters that have been defined for that particular class. Again, FlexTool user does not need to add the parameter types - the user should just add needed parameter values for the entities the user has created. Database editor in brief Spine Toolbox database editor can be used to modify data and to build scenarios. The figure below shows an example where parameter data from two alternatives have been selected for display (in the data table). The object tree on the left selects two nodes ('coal_market' and 'west') as well as one unit ('coal_plant'). Consequently, one can use both whole classes and individual entities (members of the classes) as data filters. The results of this filter are visualized in the graph on top. The mouse pointer is showing a relationship entity that connects the 'coal_plant' and its output node 'west'. The relationship entity is defined in a relationship tree, which is not visible here. The scenario tree (on the right, below the alternative tree) shows that the 'coal' scenario is formed by taking all data from the 'init' alternative and then all data from the 'coal' alternative . If there would be same parameter defined for both scenarios , then the latter alternative would overwrite the first alternative . Whenever data is modified, the data is staged in separate database tables (although not directly visible to user). The changes will be applied only once the user commits the changes and leaves a commit message to indicate what has been done. The commit can be done with ctrl-enter or from the database editor menu (triple bar at top-right). The database editor menu has options for how to display the data: table view, different pivot views and a graph view. It also contains a tool to delete data ( purge ) and decrease database size by removing unused allocations ( vacuum ). You can also bring back dock windows that have been closed by the user. History will show the history of data changes based on the commits made by the user. More on Spine Database editor in Database Editor User Guide .","title":"Toolbox interface"},{"location":"spine_toolbox/#irena-flextool-workflow-shortly-explained","text":"IRENA FlexTool workflow is a Spine Toolbox workflow that can be modified by the user. The workflow provided in the repository is a template Spine Toolbox project that can be either copied for local changes or the workflow data input data files can be switched to local files. It is also possible to work directly with the template, but then one needs to be careful when pulling a new version of IRENA FlexTool since that can overwrite local changes (the input data file contents need to be copied to safety before updating). If you are using the IRENA FlexTool browser-interface , then you will not directly see the Spine Toolbox workflow, but the FlexTool web-server will be executing parts of the workflow in the background as you develop and run the model. The panel on the right shows the different scenarios that are available in the database. The user can choose which scenarios will be processed by the workflow (until item Results , which combines the results into one database). Spine Toolbox can execute scenarios in parallel (as long as using 'work directories' is defined in FlexTool item). Input data workflow item points to a sqlite file that needs to have IRENA FlexTool data format (that uses Spine Toolbox database definition). The template file has the right format and contains empty object classes corresponding to FlexTool data structure as well as parameters available in each object class. Double clicking the Input data workflow item will open the database editor. Just selecting the Input data workflow item allows one to change the file (make a copy of the existing Input_data.sqlite using the file system of your OS and point to the copy). Init workflow item points to a sqlite file with predefined data that showcases IRENA FlexTool functionality. Some of the scenarios from there are used in the user guide. Initialize copies the contents of the Init database to the Input data database. The scenario filter in the arrow after the Init database can be used to choose what data will be copied. Export_to_csv workflow item is a Spine Toolbox exporter that has been set to write csv files that IRENA FlexTool model code will read. FlexTool workflow item contains a Python script that calls FlexTool model code for each solve and passes data between these solves. FlexTool model is written in MathProg and it calls HiGHS solver by default to solve the model. The outputs are csv files. Import_results is a Spine Toolbox importer that takes the output csv files and writes them in the Results database. Excel_input_data and Import_from_Excel allow users to use Excel as an interface for the input data. They are optional parts of the workflow. To_Excel worfklow item will export most scenario results to a simple Excel file. One way to utilize this is by creating another Excel file that draws figures from the result Excel file that is then updated by the workflow. The browser interface of FlexTool also runs part of this same workflow ( Export_to_csv --> FlexTool --> Import_results ). The server takes a copy of the workflow (inside the user_projects) folder and uses Spine Toolbox to execute the scenarios. More instructions for Spine Toolbox in Toolbox User Guide .","title":"IRENA FlexTool workflow shortly explained"},{"location":"spine_toolbox/#data-structure-in-spine-databases","text":"Spine databases use Entity-Attribute-Value with Classes and Relationships (EAV-CR). Entity classes define the categories of data. These can be one-dimensional object classes (e.g. node or unit ) or multi-dimensional relationship classes formed from the object classes (e.g. unit__node ). Spine Toolbox user can define these classes to suit their modelling needs. For FlexTool the entity classes have been pre-defined. Instead, FlexTool user needs to add the entity instances: objects and relationships that define the particular network structure to be modelled (e.g. coal_plant unit or west node ). Furthermore, each entity class (object or relationship) can hold only parameters that have been defined for that particular class. Again, FlexTool user does not need to add the parameter types - the user should just add needed parameter values for the entities the user has created.","title":"Data structure in Spine databases"},{"location":"spine_toolbox/#database-editor-in-brief","text":"Spine Toolbox database editor can be used to modify data and to build scenarios. The figure below shows an example where parameter data from two alternatives have been selected for display (in the data table). The object tree on the left selects two nodes ('coal_market' and 'west') as well as one unit ('coal_plant'). Consequently, one can use both whole classes and individual entities (members of the classes) as data filters. The results of this filter are visualized in the graph on top. The mouse pointer is showing a relationship entity that connects the 'coal_plant' and its output node 'west'. The relationship entity is defined in a relationship tree, which is not visible here. The scenario tree (on the right, below the alternative tree) shows that the 'coal' scenario is formed by taking all data from the 'init' alternative and then all data from the 'coal' alternative . If there would be same parameter defined for both scenarios , then the latter alternative would overwrite the first alternative . Whenever data is modified, the data is staged in separate database tables (although not directly visible to user). The changes will be applied only once the user commits the changes and leaves a commit message to indicate what has been done. The commit can be done with ctrl-enter or from the database editor menu (triple bar at top-right). The database editor menu has options for how to display the data: table view, different pivot views and a graph view. It also contains a tool to delete data ( purge ) and decrease database size by removing unused allocations ( vacuum ). You can also bring back dock windows that have been closed by the user. History will show the history of data changes based on the commits made by the user. More on Spine Database editor in Database Editor User Guide .","title":"Database editor in brief"},{"location":"tutorial/","text":"IRENA FlexTool tutorial The instructions for installing IRENA FlexTool are at Interface overview . This user guide will build a small system step-by-step. It assumes you will be using Spine Toolbox as the front-end. If you are using the IRENA FlexTool web-interface, the instructions still apply, but the example figures in this tutorial will not be as helpful. IRENA FlexTool concepts are explained in more depth at Model Parameters . Video tutorial for Building a small test system can be watched here . The Input_data and Results database tools might be complaining that they can't find databases 'input_data.sqlite' and 'Results.sqlite'. This is due to the fact that these are not included in the repository to avoid future data erasing with updates to the tool. Instead, in the flextool folder you can find databases 'input_data_template' and 'Results_template'. Make a copy of both and rename them 'input_data.sqlite' and 'Results.sqlite'. You can also change the path to the database that the tools are using by clicking them. This might be useful later, when having multiple input datasets. The small system to be built is also directly available in the FlexTool repository ( Init SQLite database) and can be opened with the Spine Toolbox database editor. The default workflow for IRENA FlexTool executes the scenarios from the Input data database (and not from the Init SQLite database). The Input data database is empty by default. Therefore, if you want to use directly the contents of the Init database (instead of building the small system step-by-step), you need to copy them to the Input data database before running the scenarios in this tutorial. To copy the data, you need to execute the Initialize workflow item: select the item, press Execute selection from the toolbar. It is not advised to run the whole workflow, ( Execute project ) since it will copy data from two sources: the Excel based input data file and the Init database and this will create two sets of data in the Input data database. More information on how to set-up and use the Spine Toolbox front-end in Toolbox interface . If not done already, in the flextool folder make a copy of the Results_template.sqlite and rename it Results.sqlite. Remark: in case you had already populated the Input data database, you need to delete the data before importing from Init SQLite database. This can be done with the 'purge' tool from the Database Editor menu: in purge , click on both Select entity and value items , and Select scenario items and then purge. Building a small test system 1st step - a node with no units 2nd step - add a coal unit 3rd step - add a wind power plant 4th step - add a network More functionality Building a small test system This tutorial can be used in couple of different ways - the best way depends on your familiarity with energy system modelling. First, all users who are not familiar with the way FlexTool manages data using Spine Toolbox functionalities , should read the page on Spine Toolbox workflow If you are new to energy system modelling , it is probably best to try to build the test system yourself while following the tutorial. This will take time and you will have to look up many data items from the Init database, but it will also force you to learn the concepts. You can also copy-paste data from the Init database to the Input data database when writing the data becomes too tedious. Before you start, it can be a good idea to to check the Essential objects for defining a power/energy system from the beginning of the FlexTool reference page to get an initial understanding of the concepts that will then grow as you learn more. If you have already run the whole workflow, then the Input_data database will be populated and you will need to delete the data before starting to build from scratch. This can be done with the 'purge' tool from the Database Editor menu: in purge , click on both Select entity and value items , and Select scenario items and then purge. If you have experience in using other types of energy system models - or perhaps older versions of FlexTool - it can be sufficient to follow the tutorial while also browsing the Init database using the database editor. Finding the entity classes, entities, and parameter values in the actual database will assist in the learning process. The concept reference page can also be useful. Finally, if you are a really experienced modeller , it can be enough to check the reference section starting from Essential objects for defining a power/energy system . 1st step - a node with no units You should have the FlexTool project open in the Spine Toolbox. Then, open the Input data database by double-clicking it in the Spine Toolbox workflow. The test system is built using alternatives . Alternative is a subset of the system than one can include to a scenario that is optimized by Flextool. For example when adding a wind plant, all the objects and relationships related to only the wind plant should be under their own alternative, so that the wind plant can be included or excluded form the scenario seamlessly. Each step will add a new alternative , and the data it contains, on top of the previous ones. The first alternative will be called west to hold the data for the first node in the model. The alternative is added in the 'Alternative tree' widget of the 'Spine Database Editor', see figure below. Next step is to add an object for the first node that will be called west . Right-click on the node object class in the object tree to select 'Add objects'. Use the dialog to add the west node and click ok. See the figures below. Later other objects will need to be added in the same manner - as well as relationships between objects. Then, add parameter data to the newly minted west node : west node represents the demand in a part of the system. First add an inflow parameter with negative values to indicate negative inflow, i.e. demand. The inflow timeseries are given as a map-type parameter where the first column contains the names of the timesteps and the second column contains the inflow parameter value for that timestep. This is tedious to do by hand, so you can also copy-paste this from the init database. There are no electricity generating units and the demand cannot be met by ordinary means. The model will therefore use the upward slack variable and accept the penalty_up cost associated with it. This represents the cost of not fulfilling the demand. Also downward penalty_down is defined although the model is not using it at this stage. Here values of 9000 and 8000 are used respectively. By default the model uses the value 10 000 for these. Therefore, it is not mandatory to set them, but sometimes these values need to be changed, so understanding how they work is nessesary. Penalties and slack variables are tools of linear optimization. They ensure that the problem is feasable at all timesteps even when the in-out-balance of the nodes is violated. If no real penalty values are known, one should just use large enough numbers, so that the system won't prefer penalty to energy production. In the results, you can see at which timesteps the penalties are used. The parameter has_balance is related to this and should be set to yes . It forces the node to have a balance on inflow and outflow. If the demand is not fulfilled, balance is forced by the slack variable that will \"create\" the energy with the penalty associated with it. The west node needs to have a parameter called is_active with value yes . This chooses the west node and all its parameters to be sent to the model. All parameters here should be part of the west alternative (column alternative_name) - they will be used whenever a scenario includes the west alternative . The model will also need parameters that define the model structure for time related issues. FlexTool time structure offers a lot of flexibility, but it is also bit complex to learn at first. At this stage not everything needs to be understood - the time structures will be explained in more detail later. First, make a new alternative called init to keep all the model structure related data separate from the data on physical objects. All parameter data that will be added next should go into the init alternative . Then, to get the model to run, you need to create the following objects and relationships: timeline object called y2020 with a map-type parameter timestep_duration that defines the timeline the time series data in the model will need to use. It contains, in the first column, the name of each timestep (e.g. t0001 or 2022-01-01-01 ) and, in the second column, the length of the timestep in hours (e.g. 1.0 ). The timestep names in the previously given inflow time series must match these timestep names - and any other timestep names in later time series. timeblockset object called 2day with a map-type parameter block_duration to define a time block using a timestep name to indicate where the timeblock starts and a number to define the duration of the timeblock in timesteps (e.g. t0001 and 48.0 ). The timeline is larger than the 48, but this way the solver uses only the first 48h. timeblockset 2day and timeline y2020 need to have timeblockset__timeline relationship 2day , y2020 . From the relationship tree right-click on the timeblockset__timeline relationship class to 'Add relationships...'. solve object called y2020_2day_dispatch with a map-type parameter period_timeblockSet to define the timeblockset to be used by each period (in this example: period p2020 in the first column of the map links to the timeblockset object 2day in the second column of the map) with an array-type parameter realized_periods to define the periods that are realised from the solve named by the object (in this example: first column of the array is the index number 1 and the second column contains the period to be realized in the results: p2020 ) with a parameter solve_mode , to be set to single_solve . Finally, the model object needs to be created. It must contain the sequence of solves. In this case flexTool model object contains just one solve y2020_2day_dispatch inside the array-type parameter. Be careful when choosing datatypes! Maps need to be maps not arrays. (In the future, an update is coming to toolbox to make this easier.) The new objects, relationships and parameters have now been staged. Even though it looks like they are in the database, they really are not - they need to be committed first. This can be done from the menu of the Database Editor (there is a commit command) or by pressing ctrl-enter . One should write an informative commit message about the changes that have been made. All commits, and the data they have affected, can be seen later from the history menu item. Interlude - creating a scenario and running the model Even though the model is very simple and will not do anything interesting, it can be executed. It is first necessary to create the scenario to be executed. Scenarios are created from alternatives in the Scenario tree widget of the Database Editor. In the figure below, a scenario called base is created that should contain alternatives west and init in order to have both a node and a model structure included in the model. The new scenario must also be committed , before it can be used. A new scenario should be added after each step in the tutorial process. Note that the order of the alternatives matters if there are conflicts between the alternatives. The alternatives lower down override the alternatives higher up on the list. For example if you would add a parameter inflow with a value -100 to the west node in the alternative init , it would use that instead of the previously set timeseries, because the init alternative is lower down in the alternative list of the scenario. Once the scenario has been committed to the database, it becomes available in the Spine Toolbox workflow. One can select scenarios to be executed from the arrow that leaves the Input data database. At this point, there will be only the base scenario available and should be selected. There is also a tool filter with FlexTool3 pre-selected. This selection needs to be present when running scenarios (it is used to filter the is_active entities into the scenario). Next, we want to run three tools: Export_to_CSV (that will make input files suitable for FlexTool), FlexTool3 (which is a Python script that calls the FlexTool model generator for each solve) and Import_results (which will take output files from FlexTool and drop their contents to the Results database with a particular alternative name). First, select the three tools (select with left click while ctrl is pressed or draw an area with ctrl pressed, see figure below). Then, press Execute selection from the menu bar. The three items should be executed and if all goes well, then green check marks appear on each of the tool once it has finished. You can explore the outputs of each item by selecting the item and looking at the Console widget window. If the Results database has an error: database not found. Go to the Flextool folder, make a copy of the Results_template.sqlite to the same folder and name it Results.sqlite . After this run the Import_results tool again. It is now possible to explore model results for the base scenario using either the Results database or the Excel file that can be exported by executing the To_Excel exporter tool. When doing that, no scenarios should be selected so that the tool will create one Excel file with data from all the alternatives that are in the results database (which will make more sense once there are more scenario results). The generated Excel file can be found by selecting the To_Excel tool and clicking on the folder icon on top-right of the Link properties widget window. 2nd step - add a coal unit In the second step, a coal unit is added. The first thing is to add a new alternative coal so that all new data added in this step will become part of the coal alternative . Then one needs to add the objects: unit coal_plant node coal_market commodity coal And relationships: unit__inputNode coal_plant, coal_market to indicate that the coal_plant is using inputs from the coal_market unit__outputNode coal_plant, west to indicate that the coal_plant will output electricity to the west node commodity__node coal, coal_market coal_plant needs the following parameters (all set for the coal alternative): efficiency (e.g. 0.4 for 40% efficiency) existing to indicate the existing capacity in the coal_plant (e.g. 500 MW) is_active set to yes to include the coal_plant in the model coal commodity needs just one parameter for price (e.g. 20 \u20ac/MWh of fuel) coal_market node needs to have is_active set to yes All these new parameters should be now part of the coal alternative . To see how the results change due to the coal power plant, make a new scenario coal that has the alternatives init , west and coal . Run the Export_to_CSV , FlexTool3 and Import_results to get the results to the Results database. If you start to get too many result alternatives in the Results database (e.g. if you happen to run the same scenario multiple times), you can delete old ones by removing the unwanted alternatives (right-click on the alternative ) and then committing the database. Interlude - visualizing the system in a graph In Spine Toolbox, it is possible to visualize your system in a graph, which will show all objects, and the relationships between them. To open this visualization mode, open the Input data database. In the top right corner, click on the menu. Select Graph in the View section. You may visualize all objects by selecting root in the Object tree , or choose specifically the objects you want to display by selecting them in the Object tree (maintain ctrl to select multiple objects). 3rd step - add a wind power plant Next, a wind power plant is added. Add a new alternative wind Add objects: unit wind_plant profile wind_profile since wind_plant does not require a commodity, but instead uses a profile to limit the generation to the available wind. Add relationships: unit__node__profile wind_plant, west, wind_profile unit__outputNode wind_plant, west wind_plant needs the following parameters (all set for the wind alternative): conversion_method to choose a method for the conversion process (in this case constant_efficiency ) efficiency for wind_plant should be set to 1 existing capacity can be set to 1000 MW is_active set to yes to include the wind_plant in the model wind_profile needs the the parameter profile with a map of values where each time step gets the maximum available capacity factor for that time step (see figure). Again, you can copy this from the init database. wind_plant, west, wind_profile relationship needs a parameter profile_method with the choice upper_limit selected. This means that the wind_plant must generate at or below its capacity factor. You can now create a new scenario wind , that has the alternatives init , west , coal and wind . Remember to commit , execute and have a look at the results (there should be no more penalty values used, since the coal and wind plant can together meet the demand in all hours). 4th step - add a network A network alternative introduces two new nodes ( east and north ) three new connections between nodes ( east_north , west_east and west_north ). The new nodes are kept simple: they have a is_active parameter set to yes they have a has_balance parameter set to yes (to force the node to maintain an energy balance) they have a constant negative inflow (i.e. demand) penalty values for violating their energy balance The three connections have the following parameters: they have a is_active parameter set to yes they have a existing parameter to indicate the existing interconnection capacity between the nodes they have a efficiency parameter (e.g. 0.9 for 90% efficiency). It is also necessary to create the relationships connection__node__node for east_north | east | north , west_north | west | north and west_east | west | east . The north node has the lowest upward penalty, so the model will prefer to use that whenever the coal and wind units cannot meet all the demand. Sometimes the existing capacity of the new connections will not be sufficient to carry all the needed power, since both generators are producing to the west node . Commit , execute and explore. More functionality Now you have learned how to create a small model. If you want to save it, make a copy of the Input_data database and name it something else for example Tutorial.sqlite. Remember that you can change which database is used as the Input_data by clicking the tool icon. In the same way, the Results database can be saved and changed. More instructions on how to create individual parts of the model can be found in the How to section. You can also look and play with the ready scenarios from the init database. Purge Input_data and Initialize it to copy the init database to it. This can be done with the 'purge' tool from the Database Editor menu: in purge , click on both Select entity and value items , and Select scenario items and then purge. Then select the initialize tool and run it to copy the init.sqlite to the input_data.sqlite.","title":"Tutorial"},{"location":"tutorial/#irena-flextool-tutorial","text":"The instructions for installing IRENA FlexTool are at Interface overview . This user guide will build a small system step-by-step. It assumes you will be using Spine Toolbox as the front-end. If you are using the IRENA FlexTool web-interface, the instructions still apply, but the example figures in this tutorial will not be as helpful. IRENA FlexTool concepts are explained in more depth at Model Parameters . Video tutorial for Building a small test system can be watched here . The Input_data and Results database tools might be complaining that they can't find databases 'input_data.sqlite' and 'Results.sqlite'. This is due to the fact that these are not included in the repository to avoid future data erasing with updates to the tool. Instead, in the flextool folder you can find databases 'input_data_template' and 'Results_template'. Make a copy of both and rename them 'input_data.sqlite' and 'Results.sqlite'. You can also change the path to the database that the tools are using by clicking them. This might be useful later, when having multiple input datasets. The small system to be built is also directly available in the FlexTool repository ( Init SQLite database) and can be opened with the Spine Toolbox database editor. The default workflow for IRENA FlexTool executes the scenarios from the Input data database (and not from the Init SQLite database). The Input data database is empty by default. Therefore, if you want to use directly the contents of the Init database (instead of building the small system step-by-step), you need to copy them to the Input data database before running the scenarios in this tutorial. To copy the data, you need to execute the Initialize workflow item: select the item, press Execute selection from the toolbar. It is not advised to run the whole workflow, ( Execute project ) since it will copy data from two sources: the Excel based input data file and the Init database and this will create two sets of data in the Input data database. More information on how to set-up and use the Spine Toolbox front-end in Toolbox interface . If not done already, in the flextool folder make a copy of the Results_template.sqlite and rename it Results.sqlite. Remark: in case you had already populated the Input data database, you need to delete the data before importing from Init SQLite database. This can be done with the 'purge' tool from the Database Editor menu: in purge , click on both Select entity and value items , and Select scenario items and then purge. Building a small test system 1st step - a node with no units 2nd step - add a coal unit 3rd step - add a wind power plant 4th step - add a network More functionality","title":"IRENA FlexTool tutorial"},{"location":"tutorial/#building-a-small-test-system","text":"This tutorial can be used in couple of different ways - the best way depends on your familiarity with energy system modelling. First, all users who are not familiar with the way FlexTool manages data using Spine Toolbox functionalities , should read the page on Spine Toolbox workflow If you are new to energy system modelling , it is probably best to try to build the test system yourself while following the tutorial. This will take time and you will have to look up many data items from the Init database, but it will also force you to learn the concepts. You can also copy-paste data from the Init database to the Input data database when writing the data becomes too tedious. Before you start, it can be a good idea to to check the Essential objects for defining a power/energy system from the beginning of the FlexTool reference page to get an initial understanding of the concepts that will then grow as you learn more. If you have already run the whole workflow, then the Input_data database will be populated and you will need to delete the data before starting to build from scratch. This can be done with the 'purge' tool from the Database Editor menu: in purge , click on both Select entity and value items , and Select scenario items and then purge. If you have experience in using other types of energy system models - or perhaps older versions of FlexTool - it can be sufficient to follow the tutorial while also browsing the Init database using the database editor. Finding the entity classes, entities, and parameter values in the actual database will assist in the learning process. The concept reference page can also be useful. Finally, if you are a really experienced modeller , it can be enough to check the reference section starting from Essential objects for defining a power/energy system .","title":"Building a small test system"},{"location":"tutorial/#1st-step-a-node-with-no-units","text":"You should have the FlexTool project open in the Spine Toolbox. Then, open the Input data database by double-clicking it in the Spine Toolbox workflow. The test system is built using alternatives . Alternative is a subset of the system than one can include to a scenario that is optimized by Flextool. For example when adding a wind plant, all the objects and relationships related to only the wind plant should be under their own alternative, so that the wind plant can be included or excluded form the scenario seamlessly. Each step will add a new alternative , and the data it contains, on top of the previous ones. The first alternative will be called west to hold the data for the first node in the model. The alternative is added in the 'Alternative tree' widget of the 'Spine Database Editor', see figure below. Next step is to add an object for the first node that will be called west . Right-click on the node object class in the object tree to select 'Add objects'. Use the dialog to add the west node and click ok. See the figures below. Later other objects will need to be added in the same manner - as well as relationships between objects. Then, add parameter data to the newly minted west node : west node represents the demand in a part of the system. First add an inflow parameter with negative values to indicate negative inflow, i.e. demand. The inflow timeseries are given as a map-type parameter where the first column contains the names of the timesteps and the second column contains the inflow parameter value for that timestep. This is tedious to do by hand, so you can also copy-paste this from the init database. There are no electricity generating units and the demand cannot be met by ordinary means. The model will therefore use the upward slack variable and accept the penalty_up cost associated with it. This represents the cost of not fulfilling the demand. Also downward penalty_down is defined although the model is not using it at this stage. Here values of 9000 and 8000 are used respectively. By default the model uses the value 10 000 for these. Therefore, it is not mandatory to set them, but sometimes these values need to be changed, so understanding how they work is nessesary. Penalties and slack variables are tools of linear optimization. They ensure that the problem is feasable at all timesteps even when the in-out-balance of the nodes is violated. If no real penalty values are known, one should just use large enough numbers, so that the system won't prefer penalty to energy production. In the results, you can see at which timesteps the penalties are used. The parameter has_balance is related to this and should be set to yes . It forces the node to have a balance on inflow and outflow. If the demand is not fulfilled, balance is forced by the slack variable that will \"create\" the energy with the penalty associated with it. The west node needs to have a parameter called is_active with value yes . This chooses the west node and all its parameters to be sent to the model. All parameters here should be part of the west alternative (column alternative_name) - they will be used whenever a scenario includes the west alternative . The model will also need parameters that define the model structure for time related issues. FlexTool time structure offers a lot of flexibility, but it is also bit complex to learn at first. At this stage not everything needs to be understood - the time structures will be explained in more detail later. First, make a new alternative called init to keep all the model structure related data separate from the data on physical objects. All parameter data that will be added next should go into the init alternative . Then, to get the model to run, you need to create the following objects and relationships: timeline object called y2020 with a map-type parameter timestep_duration that defines the timeline the time series data in the model will need to use. It contains, in the first column, the name of each timestep (e.g. t0001 or 2022-01-01-01 ) and, in the second column, the length of the timestep in hours (e.g. 1.0 ). The timestep names in the previously given inflow time series must match these timestep names - and any other timestep names in later time series. timeblockset object called 2day with a map-type parameter block_duration to define a time block using a timestep name to indicate where the timeblock starts and a number to define the duration of the timeblock in timesteps (e.g. t0001 and 48.0 ). The timeline is larger than the 48, but this way the solver uses only the first 48h. timeblockset 2day and timeline y2020 need to have timeblockset__timeline relationship 2day , y2020 . From the relationship tree right-click on the timeblockset__timeline relationship class to 'Add relationships...'. solve object called y2020_2day_dispatch with a map-type parameter period_timeblockSet to define the timeblockset to be used by each period (in this example: period p2020 in the first column of the map links to the timeblockset object 2day in the second column of the map) with an array-type parameter realized_periods to define the periods that are realised from the solve named by the object (in this example: first column of the array is the index number 1 and the second column contains the period to be realized in the results: p2020 ) with a parameter solve_mode , to be set to single_solve . Finally, the model object needs to be created. It must contain the sequence of solves. In this case flexTool model object contains just one solve y2020_2day_dispatch inside the array-type parameter. Be careful when choosing datatypes! Maps need to be maps not arrays. (In the future, an update is coming to toolbox to make this easier.) The new objects, relationships and parameters have now been staged. Even though it looks like they are in the database, they really are not - they need to be committed first. This can be done from the menu of the Database Editor (there is a commit command) or by pressing ctrl-enter . One should write an informative commit message about the changes that have been made. All commits, and the data they have affected, can be seen later from the history menu item.","title":"1st step - a node with no units"},{"location":"tutorial/#interlude-creating-a-scenario-and-running-the-model","text":"Even though the model is very simple and will not do anything interesting, it can be executed. It is first necessary to create the scenario to be executed. Scenarios are created from alternatives in the Scenario tree widget of the Database Editor. In the figure below, a scenario called base is created that should contain alternatives west and init in order to have both a node and a model structure included in the model. The new scenario must also be committed , before it can be used. A new scenario should be added after each step in the tutorial process. Note that the order of the alternatives matters if there are conflicts between the alternatives. The alternatives lower down override the alternatives higher up on the list. For example if you would add a parameter inflow with a value -100 to the west node in the alternative init , it would use that instead of the previously set timeseries, because the init alternative is lower down in the alternative list of the scenario. Once the scenario has been committed to the database, it becomes available in the Spine Toolbox workflow. One can select scenarios to be executed from the arrow that leaves the Input data database. At this point, there will be only the base scenario available and should be selected. There is also a tool filter with FlexTool3 pre-selected. This selection needs to be present when running scenarios (it is used to filter the is_active entities into the scenario). Next, we want to run three tools: Export_to_CSV (that will make input files suitable for FlexTool), FlexTool3 (which is a Python script that calls the FlexTool model generator for each solve) and Import_results (which will take output files from FlexTool and drop their contents to the Results database with a particular alternative name). First, select the three tools (select with left click while ctrl is pressed or draw an area with ctrl pressed, see figure below). Then, press Execute selection from the menu bar. The three items should be executed and if all goes well, then green check marks appear on each of the tool once it has finished. You can explore the outputs of each item by selecting the item and looking at the Console widget window. If the Results database has an error: database not found. Go to the Flextool folder, make a copy of the Results_template.sqlite to the same folder and name it Results.sqlite . After this run the Import_results tool again. It is now possible to explore model results for the base scenario using either the Results database or the Excel file that can be exported by executing the To_Excel exporter tool. When doing that, no scenarios should be selected so that the tool will create one Excel file with data from all the alternatives that are in the results database (which will make more sense once there are more scenario results). The generated Excel file can be found by selecting the To_Excel tool and clicking on the folder icon on top-right of the Link properties widget window.","title":"Interlude - creating a scenario and running the model"},{"location":"tutorial/#2nd-step-add-a-coal-unit","text":"In the second step, a coal unit is added. The first thing is to add a new alternative coal so that all new data added in this step will become part of the coal alternative . Then one needs to add the objects: unit coal_plant node coal_market commodity coal And relationships: unit__inputNode coal_plant, coal_market to indicate that the coal_plant is using inputs from the coal_market unit__outputNode coal_plant, west to indicate that the coal_plant will output electricity to the west node commodity__node coal, coal_market coal_plant needs the following parameters (all set for the coal alternative): efficiency (e.g. 0.4 for 40% efficiency) existing to indicate the existing capacity in the coal_plant (e.g. 500 MW) is_active set to yes to include the coal_plant in the model coal commodity needs just one parameter for price (e.g. 20 \u20ac/MWh of fuel) coal_market node needs to have is_active set to yes All these new parameters should be now part of the coal alternative . To see how the results change due to the coal power plant, make a new scenario coal that has the alternatives init , west and coal . Run the Export_to_CSV , FlexTool3 and Import_results to get the results to the Results database. If you start to get too many result alternatives in the Results database (e.g. if you happen to run the same scenario multiple times), you can delete old ones by removing the unwanted alternatives (right-click on the alternative ) and then committing the database.","title":"2nd step - add a coal unit"},{"location":"tutorial/#interlude-visualizing-the-system-in-a-graph","text":"In Spine Toolbox, it is possible to visualize your system in a graph, which will show all objects, and the relationships between them. To open this visualization mode, open the Input data database. In the top right corner, click on the menu. Select Graph in the View section. You may visualize all objects by selecting root in the Object tree , or choose specifically the objects you want to display by selecting them in the Object tree (maintain ctrl to select multiple objects).","title":"Interlude - visualizing the system in a graph"},{"location":"tutorial/#3rd-step-add-a-wind-power-plant","text":"Next, a wind power plant is added. Add a new alternative wind Add objects: unit wind_plant profile wind_profile since wind_plant does not require a commodity, but instead uses a profile to limit the generation to the available wind. Add relationships: unit__node__profile wind_plant, west, wind_profile unit__outputNode wind_plant, west wind_plant needs the following parameters (all set for the wind alternative): conversion_method to choose a method for the conversion process (in this case constant_efficiency ) efficiency for wind_plant should be set to 1 existing capacity can be set to 1000 MW is_active set to yes to include the wind_plant in the model wind_profile needs the the parameter profile with a map of values where each time step gets the maximum available capacity factor for that time step (see figure). Again, you can copy this from the init database. wind_plant, west, wind_profile relationship needs a parameter profile_method with the choice upper_limit selected. This means that the wind_plant must generate at or below its capacity factor. You can now create a new scenario wind , that has the alternatives init , west , coal and wind . Remember to commit , execute and have a look at the results (there should be no more penalty values used, since the coal and wind plant can together meet the demand in all hours).","title":"3rd step - add a wind power plant"},{"location":"tutorial/#4th-step-add-a-network","text":"A network alternative introduces two new nodes ( east and north ) three new connections between nodes ( east_north , west_east and west_north ). The new nodes are kept simple: they have a is_active parameter set to yes they have a has_balance parameter set to yes (to force the node to maintain an energy balance) they have a constant negative inflow (i.e. demand) penalty values for violating their energy balance The three connections have the following parameters: they have a is_active parameter set to yes they have a existing parameter to indicate the existing interconnection capacity between the nodes they have a efficiency parameter (e.g. 0.9 for 90% efficiency). It is also necessary to create the relationships connection__node__node for east_north | east | north , west_north | west | north and west_east | west | east . The north node has the lowest upward penalty, so the model will prefer to use that whenever the coal and wind units cannot meet all the demand. Sometimes the existing capacity of the new connections will not be sufficient to carry all the needed power, since both generators are producing to the west node . Commit , execute and explore.","title":"4th step - add a network"},{"location":"tutorial/#more-functionality","text":"Now you have learned how to create a small model. If you want to save it, make a copy of the Input_data database and name it something else for example Tutorial.sqlite. Remember that you can change which database is used as the Input_data by clicking the tool icon. In the same way, the Results database can be saved and changed. More instructions on how to create individual parts of the model can be found in the How to section. You can also look and play with the ready scenarios from the init database. Purge Input_data and Initialize it to copy the init database to it. This can be done with the 'purge' tool from the Database Editor menu: in purge , click on both Select entity and value items , and Select scenario items and then purge. Then select the initialize tool and run it to copy the init.sqlite to the input_data.sqlite.","title":"More functionality"}]}