set upDown := up down;

set sense := greater_than, less_than, equal;
set sense_greater_than := greater_than;
set sense_less_than := less_than;
set sense_equal := equal;

set ct_method := 
  efficiency
  operating_area
  no_losses_no_variable_cost
  variable_cost_only
  regular
  exact
;

set startup_method :=
  no_startup
  linear
  binary
;

set ramp_method :=
  ramp_limit
  ramp_cost
  both
;

set ramp_cost_method := ramp_cost both;
set ramp_limit_method := ramp_limit both;


set method :=
  method_1way_1var_off
  method_1way_1var_LP
  method_1way_1var_MIP
  method_1way_nvar_off
  method_1way_nvar_LP
  method_1way_nvar_MIP
  method_2way_1var_off
  method_2way_2var_off
  method_2way_2var_exclude
  method_2way_2var_MIP_exclude
  method_2way_nvar_off
  method_1way_area_off
  method_1way_area_LP
  method_1way_area_MIP
;

set method_1var := method_1way_1var_off, method_2way_1var_off;
set method_1var_off := method_1way_1var_off, method_2way_1var_off; 
set method_1way_off := method_1way_1var_off, method_1way_nvar_off, method_1way_area_off;
set method_2way_off := method_2way_1var_off, method_2way_2var_off, method_2way_2var_exclude, method_2way_nvar_off; 
set method_1way_1var_on := method_1way_1var_LP, method_1way_1var_MIP; 
set method_1way_nvar_on := method_1way_nvar_LP, method_1way_nvar_MIP, method_1way_area_LP, method_1way_area_MIP; 
set method_1way_LP := method_1way_1var_LP, method_1way_nvar_LP, method_1way_area_LP;
set method_1way_MIP := method_1way_1var_MIP, method_1way_nvar_MIP, method_1way_area_MIP;
set method_1way := method_1way_1var_off, method_1way_1var_LP, method_1way_1var_MIP, 
                   method_1way_nvar_off, method_1way_nvar_LP, method_1way_nvar_MIP, 
				   method_1way_area_off, method_1way_area_LP, method_1way_area_MIP; 
set method_2way := method_2way_1var_off, method_2way_2var_off, method_2way_2var_exclude, 
                   method_2way_2var_MIP_exclude, method_2way_nvar_off;
set method_off := method_1way_1var_off, method_1way_nvar_off, method_2way_1var_off, 
                  method_2way_2var_exclude, method_2way_2var_off, method_2way_nvar_off, 
				  method_1way_area_off;  
set method_1way_on := method_1way_1var_LP, method_1way_1var_MIP, method_1way_nvar_off, 
                      method_1way_nvar_LP, method_1way_nvar_MIP, method_1way_area_LP, 
					  method_1way_area_MIP; 
set method_2way_on := method_2way_2var_exclude, method_2way_2var_MIP_exclude;
set method_on := method_1way_1var_LP, method_1way_1var_MIP, method_1way_nvar_LP, 
                 method_1way_nvar_MIP, method_2way_2var_MIP_exclude, method_1way_area_LP, 
				 method_1way_area_MIP;
set method_nvar := method_1way_nvar_off, method_1way_nvar_LP, method_1way_nvar_MIP, 
                   method_2way_nvar_off, method_1way_area_off, method_1way_area_LP, 
				   method_1way_area_MIP;

set method_1way_1var := method_1way_1var_off, method_1way_1var_LP, method_1way_1var_MIP, method_1way_nvar_off;
set method_2way_1var := method_2way_1var_off;
set method_2way_2var := method_2way_2var_off, method_2way_2var_exclude, method_2way_2var_MIP_exclude;
set method_2way_nvar := method_2way_nvar_off;
set method_LP := method_1way_1var_LP, method_1way_1var_MIP, method_1way_nvar_off, 
                 method_1way_nvar_LP, method_1way_area_LP;
set method_MIP := method_1way_1var_MIP, method_1way_nvar_MIP, method_2way_2var_MIP_exclude, 
                  method_1way_area_MIP;
set method_direct := method_1way_1var_off, method_1way_1var_LP, method_1way_1var_MIP, 
                     method_2way_1var_off, method_2way_2var_off, method_2way_2var_exclude, 
					 method_2way_2var_MIP_exclude;
set method_indirect := method_1way_nvar_off, method_1way_nvar_LP, method_1way_nvar_MIP, 
                       method_2way_nvar_off, method_1way_area_off, method_1way_area_LP, 
					   method_1way_area_MIP;
set method_1var_per_way := method_1way_1var_off, method_1way_1var_LP, method_1way_1var_MIP, 
                           method_2way_2var_off, method_2way_2var_exclude, method_2way_2var_MIP_exclude;
set method_area := method_1way_area_off, method_1way_area_LP, method_1way_area_MIP;

set methods := 
(efficiency, no_startup, method_1way_1var_off)
(efficiency, linear, method_1way_nvar_LP)
(efficiency, binary, method_1way_nvar_MIP)
(no_losses_no_variable_cost, no_startup, method_2way_1var_off)
(variable_cost_only, no_startup, method_2way_2var_off)
(regular, no_startup, method_2way_2var_exclude)
(exact, no_startup, method_2way_2var_MIP_exclude)
(operating_area, no_startup, method_1way_area_off)
(operating_area, linear, method_1way_area_LP)
(operating_area, binary, method_1way_area_MIP)
;

set commodityParam := price;
set processParam := existing efficiency fixed_cost interest_rate invest_cost
                    invest_forced invest_max_time invest_max_total lifetime
                    retire_forced retire_max variable_cost startup_cost
                    virtual_unitsize ramp_speed_up ramp_speed_down ramp_cost;
set sourceSinkParam := coefficient flow_unitsize variable_cost startup_cost;
set nodeParam := inflow, pq_down, pq_up, existing, interest_rate, invest_cost,
                 invest_forced, invest_max_time, invest_max_total, lifetime,
                 retire_forced, retire_max, virtual_unitsize;
set reserveParam := reservation reliability penalty_reserve,
                    increase_reserve_ratio large_failure_ratio max;
set invest_method := one_cost, timeseries_cost, not_allowed;
set modelParam := solveFirst;

set invest_method_not_allowed := not_allowed;

end;